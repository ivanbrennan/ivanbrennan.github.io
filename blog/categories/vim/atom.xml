<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: vim | detached head]]></title>
  <link href="http://ivanbrennan.github.io/blog/categories/vim/atom.xml" rel="self"/>
  <link href="http://ivanbrennan.github.io/"/>
  <updated>2014-01-16T14:25:43-05:00</updated>
  <id>http://ivanbrennan.github.io/</id>
  <author>
    <name><![CDATA[Ivan Brennan]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Rigging Vim's Netrw]]></title>
    <link href="http://ivanbrennan.github.io/blog/2014/01/16/rigging-vims-netrw/"/>
    <updated>2014-01-16T01:00:00-05:00</updated>
    <id>http://ivanbrennan.github.io/blog/2014/01/16/rigging-vims-netrw</id>
    <content type="html"><![CDATA[<p>If you&rsquo;re a Vim user, you&rsquo;re probably familiar with the <a href="http://www.vim.org/scripts/script.php?script_id=1075">NERDTree</a>, a plugin that provides a sidebar for navigating the filesystem, much like you get with a more graphical editor such as Sublime Text. It&rsquo;s a nice feature, but you don&rsquo;t necessarily need to install another plugin to get it. Most distributions of Vim come with <a href="http://www.vim.org/scripts/script.php?script_id=1075">Netrw</a> already built in. Built by <a href="http://www.drchip.org/astronaut/index.html">Charles CampBell</a>, Netrw is a plugin for browsing, reading, and writing files both locally and across networks.</p>

<p>Netrw is not NERDTree. It does much more, but the flip side is that NERDTree focuses on doing one thing well. That being said, at some point I got interested in reproducing what I liked about NERDTree using the built-in capabilities of Netrw. It took a bit of configuration and some dirty language (vimscript) but if you&rsquo;re not averse to any of that, read on.</p>

<p><img class="screenshot" src="/images/vextoggle/4.png" title="&lsquo;vim&rsquo; &lsquo;vim screenshot&rsquo;" ></p>

<p>My first goal was to toggle a sidebar navigator open/closed with a keystroke or two. The <code>:Vexplore</code> command opens a Netrw browser in a vertical split. If you pass the command a directory, it will open into that location, otherwise it opens in the current file&rsquo;s parent directory. There&rsquo;s a distinction between the current file&rsquo;s parent directory and the &ldquo;current working directory&rdquo; that Vim keeps track of. Say you start Vim from within ~/Development. You can <code>:edit</code> files anywhere you like (~/Development/resources, ~, /usr/local, etc.), and until you explicitly tell Vim to <code>:cd</code> to a new location, the current working directory will remain where it started, at ~/Development. You can use this as a home-base to work from in the current Vim session. With this in mind, I composed a small set of functions to toggle the sidebar in either the current file&rsquo;s directory (to access neighboring files), or the &ldquo;current working directory&rdquo; (which I tend to leave at the project root), and mapped them to a couple keystrokes I find convenient.</p>

<p>```
fun! VexToggle(dir)
  if exists(&ldquo;t:vex_buf_nr&rdquo;)</p>

<pre><code>call VexClose()
</code></pre>

<p>  else</p>

<pre><code>call VexOpen(a:dir)
</code></pre>

<p>  endif
endf
```</p>

<p>I&rsquo;m using <code>t:vex_buf_nr</code> to track whether the sidebar is currently open. The <code>t:</code> is scoping the variable to the current tab. That&rsquo;s so each tab can have its own sidebar. If you&rsquo;re not familiar with Vim&rsquo;s tabs, don&rsquo;t worry about it. It&rsquo;s a minor detail here. In the else clause, we pass <code>a:dir</code> (the <code>dir</code> argument that was passed into <code>VexToggle()</code>) to <code>VexOpen()</code>.</p>

<p>```
fun! VexOpen(dir)
  let g:netrw_browse_split=4    &ldquo; open files in previous window
  let vex_width = 25</p>

<p>  execute &ldquo;Vexplore &rdquo; . a:dir
  let t:vex_buf_nr = bufnr(&ldquo;%&rdquo;)
  wincmd H</p>

<p>  call VexSize(vex_width)
endf
```</p>

<p><code>VexOpen()</code> starts by setting some options. &ldquo;Open files in previous window&rdquo; ensures that when we select a file to open, it opens in the window (split) we were in before entering the browser. We&rsquo;re also setting the desired window width for later use.</p>

<p>Next, we use vimscript&rsquo;s string concatenation operator (<code>.</code>) to compose the <code>Vexplore</code> call. It&rsquo;s a little ugly, but sometimes vimscript paints you into a corner like that. Now that we have an explorer open, let&rsquo;s remember it (the next line). The <code>"%"</code> expands to the current file name, and we store the associated buffer number for later reference.</p>

<p>If you have several splits open, calling <code>:Vexplore</code> will open a Netrw explorer in a vertical split next to <em>the current split</em>, so there&rsquo;s no guarantee it will sit on the far left of the screen or even occupy the full height of Vim. Calling <code>wincmd H</code> fixes that. Finally, calling <code>VexSize()</code> will set the sidebar&rsquo;s width.</p>

<p>I made a couple mappings to call <code>VexToggle()</code>. The first passes it Vim&rsquo;s &ldquo;current working directory&rdquo; as an argument, while the second passes an empty string. That way, I can use the first mapping to toggle an explorer sidebar from the project root and the second to toggle an explorer from whichever directory houses the file I&rsquo;m currently editing.</p>

<p><code>
noremap &lt;Leader&gt;&lt;Tab&gt; :call VexToggle(getcwd())&lt;CR&gt;
noremap &lt;Leader&gt;` :call VexToggle("")&lt;CR&gt;
</code></p>

<p><img class="screenshot" src="/images/vextoggle/8.png" title="&lsquo;vim&rsquo; &lsquo;vim screenshot&rsquo;" ></p>

<p>When the sidebar is open, either mapping can be used to close it. <code>VexClose()</code> starts by noting which window it was called from, so it can return the cursor to that window after the sidebar has closed. The exception is when the cursor was <em>in</em> the sidebar when <code>VexClose()</code> was called, in which case the cursor will land in the previous window (whichever window holds the alternate file <code>"#"</code>). The middle section switches to the sidebar, closes it, and removes the internal variable that was tracking its presence. Finally, we switch to the appropriate destination window and call <code>NormalizeWidths()</code> to normalize the widths of all open windows. Note that we have to subtract 1 from the original window number that was stored, since closing the sidebar window decremented all the remaining window numbers.</p>

<p>```
fun! VexClose()
  let cur_win_nr = winnr()
  let target_nr = ( cur_win_nr == 1 ? winnr(&ldquo;#&rdquo;) : cur_win_nr )</p>

<p>  1wincmd w
  close
  unlet t:vex_buf_nr</p>

<p>  execute (target_nr &ndash; 1) . &ldquo;wincmd w&rdquo;
  call NormalizeWidths()
endf
```</p>

<p><img class="screenshot" src="/images/vextoggle/10.png" title="&lsquo;vim&rsquo; &lsquo;vim screenshot&rsquo;" ></p>

<p>All that&rsquo;s left are the final touches to window sizing, which occur in <code>VexSize()</code> and <code>NormalizeWidths()</code>. The first function sets and locks the sidebar width, then calls the second to normalize the widths off all other windows. <code>NormalizeWidths()</code> is a little hacky, but as far as I can tell it&rsquo;s the only native vimscript way to normalize window widths without affecting their heights. <code>'eadirection'</code> controls which dimensions are affected when <code>'equal always'</code> is set. We set it to <code>hor</code> (horizontal), toggle <code>'equal always'</code> off and back on (it&rsquo;s on by default), triggering the width normalization, and finally restore <code>'eadirection'</code> to it&rsquo;s original value.</p>

<p>```
fun! VexSize(vex_width)
  execute &ldquo;vertical resize&rdquo; . a:vex_width
  set winfixwidth
  call NormalizeWidths()
endf</p>

<p>fun! NormalizeWidths()
  let eadir_pref = &amp;eadirection
  set eadirection=hor
  set equalalways! equalalways!
  let &amp;eadirection = eadir_pref
endf
```</p>

<p>Netrw lets you open a selected file in a vertical split with the <code>v</code> key, and I wanted to normalize window widths when such a split was added so things would remain evenly sized. The following autocommand makes it so.</p>

<p><code>
augroup NetrwGroup
  autocmd! BufEnter * call NormalizeWidths()
augroup END
</code></p>

<p><img class="screenshot" src="/images/vextoggle/12.png" title="&lsquo;vim&rsquo; &lsquo;vim screenshot&rsquo;" ></p>

<p><strong><em>Closing Notes</em></strong></p>

<p>I ran into a couple minor bugs in Netrw during all of this, and turned to the <a href="https://groups.google.com/forum/#!topic/vim_use/XNOcLYsgk8Y">vim_use</a> mailing list for help. Netrw&rsquo;s author (Dr. Chip) was quick to respond with a fix and point me toward the <a href="http://www.drchip.org/astronaut/vim/index.html#NETRW">newest version</a>. Big thanks Dr. Chip!</p>

<p>I find myself mostly using Netrw&rsquo;s &ldquo;thin&rdquo; liststyle rather than the &ldquo;tree&rdquo; style I originally liked, but both work equally well in the sidebar. Finally, my <a href="https://github.com/ivanbrennan/vim/blob/master/vimrc">vimrc</a> is available for reference, though the relevant Netrw settings I&rsquo;m using are pasted below:</p>

<p><code>
let g:netrw_liststyle=0         " thin (change to 3 for tree)
let g:netrw_banner=0            " no banner
let g:netrw_altv=1              " open files on right
let g:netrw_preview=1           " open previews vertically
</code></p>
]]></content>
  </entry>
  
</feed>
