<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: vim | codemachine]]></title>
  <link href="http://ivanbrennan.github.io/blog/categories/vim/atom.xml" rel="self"/>
  <link href="http://ivanbrennan.github.io/"/>
  <updated>2014-11-12T23:48:56-05:00</updated>
  <id>http://ivanbrennan.github.io/</id>
  <author>
    <name><![CDATA[Ivan Brennan]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[vim key-mappings]]></title>
    <link href="http://ivanbrennan.github.io/blog/2014/10/26/vim-key-mappings/"/>
    <updated>2014-10-26T12:04:00-04:00</updated>
    <id>http://ivanbrennan.github.io/blog/2014/10/26/vim-key-mappings</id>
    <content type="html"><![CDATA[<h3>:map</h3>

<p>In the land of Vim, most key sequences can easily be mapped to others. The basic syntax is <code>map a b</code>, which tells Vim that when you type <code>a</code>, it should act like <code>b</code>. Similarly, <code>map abc wxyz</code> would process <code>wxyz</code> when you typed <code>abc</code>, but let&rsquo;s look at a more useful example.</p>

<p>You can use <code>m</code> to set a mark at the current cursor position, then jump to it later using the backtick (<code>`</code>) key. Take this buffer for example:
<code>ruby
def penguify(being)
  Penguin.new(being.mass)
rescue NameError
  puts "Can't penguify massless being."
end
</code>
I&rsquo;ll put my cursor on the <em>N</em> in <code>NameError</code> and type (in normal mode) <code>mx</code>. This sets a mark we can jump to by typing <code>`x</code>. This is nice, but the backtick isn&rsquo;t the most comfortable key to reach for.</p>

<p>There&rsquo;s a similar command using the single-quote. Typing <code>'x</code> jumps to the first non-whitespace character on the marked line. Probably not as useful. Let&rsquo;s map the more reachable <code>'</code> to the more useful <code>`</code>.</p>

<p>On Vim&rsquo;s command-line, enter: <code>map ' `</code>. Now both <code>`</code> and <code>'</code> will take us directly to our mark. Instead of ditching the single-quote&rsquo;s original command entirely, let&rsquo;s map the backtick to it with <code>map ` '</code>. But this causes a problem. Hit either <code>`</code> or <code>'</code> and you&rsquo;ll get an error (<code>E223: recursive mapping</code>). We&rsquo;ve mapped <code>`</code> to <code>'</code>, which triggers <code>`</code>, which triggers <code>'</code>, and on and on.</p>

<h3>:noremap</h3>

<p>To recover, let&rsquo;s remove both mappings with <code>unmap `</code> and <code>unmap '</code>, to start fresh. Now instead of using <code>map</code> we&rsquo;ll use <code>noremap</code>. Running <code>noremap a b</code> will map <code>a</code> to <code>b</code> but avoid triggering anything <code>b</code> is mapped to. So we can enter <code>noremap ' `</code> and <code>noremap ` '</code> to swap our keys without falling into a recursive pit.</p>

<h3>map-modes</h3>

<p>Depending on how you define them, your key-mappings will only apply in certain modes. The mappings we created with <code>map</code> and <code>noremap</code> apply in Normal, Visual, Select, and Operator-pending modes. Note the absence of Insert mode in that list &mdash; we&rsquo;re not in danger of inserting <code>doesn`t</code> when we wanted <code>doesn't</code>.</p>

<p>The <code>map</code>, <code>noremap</code>, and <code>unmap</code> commands each have mode-specific variations. My .vimrc, for instance, has a mapping for line-completion in Insert mode:</p>

<pre><code>inoremap &lt;C-L&gt; &lt;C-X&gt;&lt;C-L&gt;
</code></pre>

<p>The <code>&lt;C-L&gt;</code> represents Control-L, and is case-insensitive (same as <code>&lt;c-l&gt;</code>). This makes line-completion less cumbersome without polluting modes other than Insert with the mapping. For more on map-modes, check out <code>:help :map-modes</code>. The map-overview (<code>:help map-overview</code>) is a good place to start.</p>

<h3>key-notation</h3>

<p>Vim uses a special notation for some keys. We saw <code>&lt;C-L&gt;</code> already. There&rsquo;s also <code>&lt;Left&gt;</code>, <code>&lt;S-Left&gt;</code> (shift-left), <code>&lt;Space&gt;</code>, <code>&lt;CR&gt;</code> (carriage return / enter), and many more (see <code>:help key-notation</code>). We can use these to expand our key-mapping vocabulary.</p>

<h3>editor-envy</h3>

<p>I noticed a feature in Sublime Text that I wanted to simulate in Vim: <code>⌘Enter</code> adds a newline to the <em>end</em> of the current line rather than inserting it at the cursor position. This is handy if you&rsquo;re in the middle of a line and want to open a new line beneath it without breaking the text the cursor&rsquo;s on.</p>

<p>To similate this, I needed to <code>inoremap</code> something to <code>&lt;C-O&gt;o</code>. From Insert mode, <code>&lt;C-O&gt;</code> pops you into Normal mode for a single command. Once there, <code>o</code> opens a new line beneath the current one and drops you onto it in Insert mode. In the interest of portability, I decided against using the <code>⌘</code> key, since it&rsquo;s Mac-specific, and went with Control instead:</p>

<pre><code>inoremap &lt;C-CR&gt; &lt;C-O&gt;o
</code></pre>

<p>Now I can hit Control-Enter from Insert mode to drop down to a new line without disrupting the one I&rsquo;m on. Actually no, I can&rsquo;t. I can if I&rsquo;m using MacVim, but terminal Vim doesn&rsquo;t recognize the <code>&lt;C-CR&gt;</code> key-combo. This is where things get interesting.</p>

<h3>terminal keycodes</h3>

<p>To get the <code>&lt;C-CR&gt;</code> key-mapping to work in terminal Vim, I needed to first tell iTerm what to send when I hit Control-Enter, then tell Vim what to listen for and how to interpret it. Let&rsquo;s start with iTerm. The steps for Terminal.app are similar, though the menus and appearance will differ.</p>

<p>In iTerm&rsquo;s <em>Preferences</em> (<code>⌘,</code>), the <em>Profiles</em> tab has a <em>Keys</em> subtab. From there, you can define custom actions to trigger with any number of key-combinations. Clicking the &lsquo;<strong>+</strong>&rsquo; at the bottom of the list reveals a dialog to add a new combination.</p>

<p><img class="screenshot" src="/images/iterm/keys.png" title="&lsquo;keys&rsquo; &lsquo;iterm keys screenshot&rsquo;" ></p>

<p>I hit Control-Enter to enter <code>^↩</code> in the <em>Keyboard Shortcut</em> field and selected <em>Send Escape Sequence</em> from the <em>Action</em> drop-down, revealing a field labeled &ldquo;Esc+&rdquo;. Here I entered <code>[25~</code>, telling iTerm to send Esc + <code>[25~</code> when Control-Enter is typed.</p>

<p>&ldquo;Why <code>[25~</code>? Where did that come from?&rdquo; I was hoping you wouldn&rsquo;t ask. Figuring out what codes to use, what wouldn&rsquo;t conflict with anything, and what would be interpretted consistently across xterm, GNU screen, and tmux was not a straightforward process. Lots of googling and trial and error, and recounting it is probably best saved for another post. For now, I&rsquo;ll stay focused on getting it wired up with Vim.</p>

<p>Next, I needed to tell Vim how to interpret the <code>^[[25~</code> escape sequence that iTerm would be sending its way. (Note that the initial <code>^[</code> is the Escape character itself.) I set an unused Function key to the escape sequence:</p>

<pre><code>set &lt;F13&gt;=^[[25~
</code></pre>

<p>To enter that command correctly, you need to type <code>set &lt;F13&gt;=</code>, hit Control-V, hit Escape, then finish with <code>[25~</code>. Control-V followed by Escape enters the actual terminal code for the Escape key (which <em>appears</em> as the single character <code>^[</code>). The same is true whether you&rsquo;re entering it on Vim&rsquo;s command-line or inserting it in your .vimrc.</p>

<p>With Vim listening for the escape sequence and associating it with a key, I mapped that key to <code>&lt;C-CR&gt;</code>:</p>

<pre><code>map  &lt;F13&gt; &lt;C-Cr&gt;  
map! &lt;F13&gt; &lt;C-Cr&gt;
</code></pre>

<p>The call to <code>map</code> applies the mapping in Normal, Visual, Select, and Operator-pending mappings, while <code>map!</code> applies to Insert and Command-line mappings. With all this in place, terminal Vim can recognize Control-Enter and the <code>&lt;C-CR&gt;</code> key-notation.</p>

<p>You can apply this approach to a lot of other key&rsquo;s that would otherwise be off-limits. A section of my <a href="https://github.com/ivanbrennan/vim/blob/master/vimrc">vimrc</a> wires up a bunch of them. I&rsquo;m cutting down on the mappings these days, but it&rsquo;s nice to know you can do this:</p>

<pre><code>if &amp;term =~ "xterm" || &amp;term =~ "screen" || &amp;term =~ "builtin_gui"
  " Ctrl-Enter
  set  &lt;F13&gt;=[25~
  map  &lt;F13&gt; &lt;C-CR&gt;
  map! &lt;F13&gt; &lt;C-CR&gt;

  " Shift-Enter
  set  &lt;F14&gt;=[27~
  map  &lt;F14&gt; &lt;S-CR&gt;
  map! &lt;F14&gt; &lt;S-CR&gt;

  " Ctrl-Space
  set  &lt;F15&gt;=[29~
  map  &lt;F15&gt; &lt;C-Space&gt;
  map! &lt;F15&gt; &lt;C-Space&gt;

  " Shift-Space
  set  &lt;F16&gt;=[30~
  map  &lt;F16&gt; &lt;S-Space&gt;
  map! &lt;F16&gt; &lt;S-Space&gt;

  " Ctrl-Backspace
  set  &lt;F17&gt;=[1;5P
  map  &lt;F17&gt; &lt;C-BS&gt;
  map! &lt;F17&gt; &lt;C-BS&gt;

  " Alt-Tab
  set  &lt;F18&gt;=[1;5Q
  map  &lt;F18&gt; &lt;M-Tab&gt;
  map! &lt;F18&gt; &lt;M-Tab&gt;

  " Alt-Shift-Tab
  set  &lt;F19&gt;=[1;5R
  map  &lt;F19&gt; &lt;M-S-Tab&gt;
  map! &lt;F19&gt; &lt;M-S-Tab&gt;

  " Ctrl-Up
  set  &lt;F20&gt;=[1;5A
  map  &lt;F20&gt; &lt;C-Up&gt;
  map! &lt;F20&gt; &lt;C-Up&gt;

  " Ctrl-Down
  set  &lt;F21&gt;=[1;5B
  map  &lt;F21&gt; &lt;C-Down&gt;
  map! &lt;F21&gt; &lt;C-Down&gt;

  " Ctrl-Right
  set  &lt;F22&gt;=[1;5C
  map  &lt;F22&gt; &lt;C-Right&gt;
  map! &lt;F22&gt; &lt;C-Right&gt;

  " Ctrl-Left
  set  &lt;F23&gt;=[1;5D
  map  &lt;F23&gt; &lt;C-Left&gt;
  map! &lt;F23&gt; &lt;C-Left&gt;

  " Ctrl-Tab
  set  &lt;F24&gt;=[31~
  map  &lt;F24&gt; &lt;C-Tab&gt;
  map! &lt;F24&gt; &lt;C-Tab&gt;

  " Ctrl-Shift-Tab
  set  &lt;F25&gt;=[32~
  map  &lt;F25&gt; &lt;C-S-Tab&gt;
  map! &lt;F25&gt; &lt;C-S-Tab&gt;

  " Ctrl-Comma
  set  &lt;F26&gt;=[33~
  map  &lt;F26&gt; &lt;C-,&gt;
  map! &lt;F26&gt; &lt;C-,&gt;

  " Ctrl-Shift-Space
  set  &lt;F27&gt;=[34~
  map  &lt;F27&gt; &lt;C-S-Space&gt;
  map! &lt;F27&gt; &lt;C-S-Space&gt;
endif
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rigging Vim's Netrw]]></title>
    <link href="http://ivanbrennan.github.io/blog/2014/01/16/rigging-vims-netrw/"/>
    <updated>2014-01-16T01:00:00-05:00</updated>
    <id>http://ivanbrennan.github.io/blog/2014/01/16/rigging-vims-netrw</id>
    <content type="html"><![CDATA[<p>If you&rsquo;re a Vim user, you&rsquo;re probably familiar with the <a href="http://www.vim.org/scripts/script.php?script_id=1075">NERDTree</a>, a plugin that provides a sidebar for navigating the filesystem, much like you get with a more graphical editor such as Sublime Text. It&rsquo;s a nice feature, but you don&rsquo;t necessarily need to install another plugin to get it. Most distributions of Vim come with <a href="http://www.vim.org/scripts/script.php?script_id=1075">Netrw</a> already built in. Built by <a href="http://www.drchip.org/astronaut/index.html">Charles CampBell</a>, Netrw is a plugin for browsing, reading, and writing files both locally and across networks.</p>

<p>Netrw is not NERDTree. It does much more, but the flip side is that NERDTree focuses on doing one thing well. That being said, at some point I got interested in reproducing what I liked about NERDTree using the built-in capabilities of Netrw. It took a bit of configuration and some dirty language (vimscript) but if you&rsquo;re not averse to any of that, read on.</p>

<p><img class="screenshot" src="/images/vextoggle/4.png" title="&lsquo;vim&rsquo; &lsquo;vim screenshot&rsquo;" ></p>

<p>My first goal was to toggle a sidebar navigator open/closed with a keystroke or two. The <code>:Vexplore</code> command opens a Netrw browser in a vertical split. If you pass the command a directory, it will open into that location, otherwise it opens in the current file&rsquo;s parent directory. There&rsquo;s a distinction between the current file&rsquo;s parent directory and the &ldquo;current working directory&rdquo; that Vim keeps track of. Say you start Vim from within ~/Development. You can <code>:edit</code> files anywhere you like (~/Development/resources, ~, /usr/local, etc.), and until you explicitly tell Vim to <code>:cd</code> to a new location, the current working directory will remain where it started, at ~/Development. You can use this as a home-base to work from in the current Vim session. With this in mind, I composed a small set of functions to toggle the sidebar in either the current file&rsquo;s directory (to access neighboring files), or the &ldquo;current working directory&rdquo; (which I tend to leave at the project root), and mapped them to a couple keystrokes I find convenient.</p>

<p>```vim
fun! VexToggle(dir)
  if exists(&ldquo;t:vex_buf_nr&rdquo;)</p>

<pre><code>call VexClose()
</code></pre>

<p>  else</p>

<pre><code>call VexOpen(a:dir)
</code></pre>

<p>  endif
endf
```</p>

<p>I&rsquo;m using <code>t:vex_buf_nr</code> to track whether the sidebar is currently open. The <code>t:</code> is scoping the variable to the current tab. That&rsquo;s so each tab can have its own sidebar. If you&rsquo;re not familiar with Vim&rsquo;s tabs, don&rsquo;t worry about it. It&rsquo;s a minor detail here. In the else clause, we pass <code>a:dir</code> (the <code>dir</code> argument that was passed into <code>VexToggle()</code>) to <code>VexOpen()</code>.</p>

<p>```vim
fun! VexOpen(dir)
  let g:netrw_browse_split=4    &ldquo; open files in previous window
  let vex_width = 25</p>

<p>  execute &ldquo;Vexplore &rdquo; . a:dir
  let t:vex_buf_nr = bufnr(&ldquo;%&rdquo;)
  wincmd H</p>

<p>  call VexSize(vex_width)
endf
```</p>

<p><code>VexOpen()</code> starts by setting some options. &ldquo;Open files in previous window&rdquo; ensures that when we select a file to open, it opens in the window (split) we were in before entering the browser. We&rsquo;re also setting the desired window width for later use.</p>

<p>Next, we use vimscript&rsquo;s string concatenation operator (<code>.</code>) to compose the <code>Vexplore</code> call. It&rsquo;s a little ugly, but sometimes vimscript paints you into a corner like that. Now that we have an explorer open, let&rsquo;s remember it (the next line). The <code>"%"</code> expands to the current file name, and we store the associated buffer number for later reference.</p>

<p>If you have several splits open, calling <code>:Vexplore</code> will open a Netrw explorer in a vertical split next to <em>the current split</em>, so there&rsquo;s no guarantee it will sit on the far left of the screen or even occupy the full height of Vim. Calling <code>wincmd H</code> fixes that. Finally, calling <code>VexSize()</code> will set the sidebar&rsquo;s width.</p>

<p>I made a couple mappings to call <code>VexToggle()</code>. The first passes it Vim&rsquo;s &ldquo;current working directory&rdquo; as an argument, while the second passes an empty string. That way, I can use the first mapping to toggle an explorer sidebar from the project root and the second to toggle an explorer from whichever directory houses the file I&rsquo;m currently editing.</p>

<pre><code>noremap &lt;Leader&gt;&lt;Tab&gt; :call VexToggle(getcwd())&lt;CR&gt;
noremap &lt;Leader&gt;` :call VexToggle("")&lt;CR&gt;
</code></pre>

<p><img class="screenshot" src="/images/vextoggle/8.png" title="&lsquo;vim&rsquo; &lsquo;vim screenshot&rsquo;" ></p>

<p>When the sidebar is open, either mapping can be used to close it. <code>VexClose()</code> starts by noting which window it was called from, so it can return the cursor to that window after the sidebar has closed. The exception is when the cursor was <em>in</em> the sidebar when <code>VexClose()</code> was called, in which case the cursor will land in the previous window (whichever window holds the alternate file <code>"#"</code>). The middle section switches to the sidebar, closes it, and removes the internal variable that was tracking its presence. Finally, we switch to the appropriate destination window and call <code>NormalizeWidths()</code> to normalize the widths of all open windows. Note that we have to subtract 1 from the original window number that was stored, since closing the sidebar window decremented all the remaining window numbers.</p>

<p>```vim
fun! VexClose()
  let cur_win_nr = winnr()
  let target_nr = ( cur_win_nr == 1 ? winnr(&ldquo;#&rdquo;) : cur_win_nr )</p>

<p>  1wincmd w
  close
  unlet t:vex_buf_nr</p>

<p>  execute (target_nr &ndash; 1) . &ldquo;wincmd w&rdquo;
  call NormalizeWidths()
endf
```</p>

<p><img class="screenshot" src="/images/vextoggle/10.png" title="&lsquo;vim&rsquo; &lsquo;vim screenshot&rsquo;" ></p>

<p>All that&rsquo;s left are the final touches to window sizing, which occur in <code>VexSize()</code> and <code>NormalizeWidths()</code>. The first function sets and locks the sidebar width, then calls the second to normalize the widths off all other windows. <code>NormalizeWidths()</code> is a little hacky, but as far as I can tell it&rsquo;s the only native vimscript way to normalize window widths without affecting their heights. <code>'eadirection'</code> controls which dimensions are affected when <code>'equal always'</code> is set. We set it to <code>hor</code> (horizontal), toggle <code>'equal always'</code> off and back on (it&rsquo;s on by default), triggering the width normalization, and finally restore <code>'eadirection'</code> to it&rsquo;s original value.</p>

<p>```vim
fun! VexSize(vex_width)
  execute &ldquo;vertical resize&rdquo; . a:vex_width
  set winfixwidth
  call NormalizeWidths()
endf</p>

<p>fun! NormalizeWidths()
  let eadir_pref = &amp;eadirection
  set eadirection=hor
  set equalalways! equalalways!
  let &amp;eadirection = eadir_pref
endf
```</p>

<p>Netrw lets you open a selected file in a vertical split with the <code>v</code> key, and I wanted to normalize window widths when such a split was added so things would remain evenly sized. The following autocommand makes it so.</p>

<pre><code>augroup NetrwGroup
  autocmd! BufEnter * call NormalizeWidths()
augroup END
</code></pre>

<p><img class="screenshot" src="/images/vextoggle/12.png" title="&lsquo;vim&rsquo; &lsquo;vim screenshot&rsquo;" ></p>

<p><strong><em>Closing Notes</em></strong></p>

<p>I ran into a couple minor bugs in Netrw during all of this, and turned to the <a href="https://groups.google.com/forum/#!topic/vim_use/XNOcLYsgk8Y">vim_use</a> mailing list for help. Netrw&rsquo;s author (Dr. Chip) was quick to respond with a fix and point me toward the <a href="http://www.drchip.org/astronaut/vim/index.html#NETRW">newest version</a>. Big thanks Dr. Chip!</p>

<p>I find myself mostly using Netrw&rsquo;s &ldquo;thin&rdquo; liststyle rather than the &ldquo;tree&rdquo; style I originally liked, but both work equally well in the sidebar. Finally, my <a href="https://github.com/ivanbrennan/vim/blob/master/vimrc">vimrc</a> is available for reference, though the relevant Netrw settings I&rsquo;m using are pasted below:</p>

<pre><code>let g:netrw_liststyle=0         " thin (change to 3 for tree)
let g:netrw_banner=0            " no banner
let g:netrw_altv=1              " open files on right
let g:netrw_preview=1           " open previews vertically
</code></pre>
]]></content>
  </entry>
  
</feed>
