<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: shell | codemachine]]></title>
  <link href="http://ivanbrennan.github.io/blog/categories/shell/atom.xml" rel="self"/>
  <link href="http://ivanbrennan.github.io/"/>
  <updated>2017-06-03T13:45:19-04:00</updated>
  <id>http://ivanbrennan.github.io/</id>
  <author>
    <name><![CDATA[Ivan Brennan]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Shell: while loops and variables]]></title>
    <link href="http://ivanbrennan.github.io/blog/2017/06/03/shell-while-loops-and-variables/"/>
    <updated>2017-06-03T11:22:00-04:00</updated>
    <id>http://ivanbrennan.github.io/blog/2017/06/03/shell-while-loops-and-variables</id>
    <content type="html"><![CDATA[<p>A common idiom in shell scripting is to tweak the value of <code>IFS</code> (internal field separator) while reading lines of input:
```sh
while IFS= read -r line
do</p>

<pre><code># ...
</code></pre>

<p>done
<code>``
This leads to questions about</code>IFS<code>itself and the</code>-r<code>flag, and there are plenty of good answers out there. I'd like to focus, however, on the *syntax* of</code>IFS=` and it&rsquo;s location in the above line.</p>

<p>Shell variables can be assigned and referenced:
```sh</p>

<blockquote><p>var=A
echo $var
A
<code>
Sometimes you want to set a variable for the duration of a single command:
</code>sh
name=Bob bash -c &lsquo;echo $name&rsquo;
Bob
echo $name</p></blockquote>

<p><code>
At first glance, you might expect the first line of our `while` loop to look like:
</code>sh
IFS= while read -r line
<code>``
but this causes a syntax error. In the</code>name=Bob` example, our entire line consisted of a single <a href="http://pubs.opengroup.org/onlinepubs/9699919799/utilities/V3_chap02.html#tag_18_09_01">simple command</a>, defined as</p>

<blockquote><p>a sequence of optional variable assignments and redirections, in any sequence, optionally followed by words and redirections, terminated by a control operator.</p></blockquote>

<p>The <code>while</code> loop, however, is a <a href="http://pubs.opengroup.org/onlinepubs/9699919799/utilities/V3_chap02.html#tag_18_09_04">compound command</a>, with the format:
```
while compound-list-1
do</p>

<pre><code>compound-list-2
</code></pre>

<p>done
<code>``
with</code>compound-list-1` being a sequence of <a href="http://pubs.opengroup.org/onlinepubs/9699919799/utilities/V3_chap02.html#tag_18_09_03">lists</a>. A list is defined as</p>

<blockquote><p>a sequence of one or more AND-OR lists separated by the operators &lsquo;;&rsquo; and &lsquo;&amp;&rsquo;.</p></blockquote>

<p>with an <code>AND-OR</code> list being</p>

<blockquote><p>a sequence of one or more pipelines separated by the operators &ldquo;&amp;&amp;&rdquo; and &ldquo;||&rdquo; .</p></blockquote>

<p>A <a href="http://pubs.opengroup.org/onlinepubs/9699919799/utilities/V3_chap02.html#tag_18_09_02">pipeline</a>, in turn, has the format:</p>

<blockquote><p>[!] command1 [ | command2 &hellip;]</p></blockquote>

<p>It feels like we&rsquo;re going in circles, but the long and short of it is that we can view
<code>sh
while IFS= read -r line
</code>
as
<code>
while simple-command
</code>
Note that this means we&rsquo;re setting <code>IFS</code> to a temporary value only during the <code>read</code> command, not during the body of the loop.</p>

<p>To make this a little more concrete, here&rsquo;s a script I&rsquo;ve called <code>while-vars.sh</code>:
```sh
var=A
i=1</p>

<p>tester() {
  echo &ldquo;var in tester: $var&rdquo;
  (( $i > 0 ))
}</p>

<p>echo -e &ldquo;var before loop: $var\n&rdquo;</p>

<p>while var=B tester; do
  let i-=1
  echo &ldquo;var in loop: $var&rdquo;
done</p>

<p>echo -e &ldquo;\nvar after loop: $var&rdquo;
```</p>

<p>The result:
```sh</p>

<blockquote><p>bash while-vars.sh
var before loop: A</p></blockquote>

<p>var in tester: B
var in loop: A
var in tester: B</p>

<p>var after loop: A
```</p>
]]></content>
  </entry>
  
</feed>
