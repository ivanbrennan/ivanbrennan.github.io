<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[codemachine]]></title>
  <link href="http://ivanbrennan.github.io/atom.xml" rel="self"/>
  <link href="http://ivanbrennan.github.io/"/>
  <updated>2018-01-06T13:51:46-05:00</updated>
  <id>http://ivanbrennan.github.io/</id>
  <author>
    <name><![CDATA[Ivan Brennan]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[follow the types]]></title>
    <link href="http://ivanbrennan.github.io/blog/2018/01/06/follow-the-types/"/>
    <updated>2018-01-06T13:18:00-05:00</updated>
    <id>http://ivanbrennan.github.io/blog/2018/01/06/follow-the-types</id>
    <content type="html"><![CDATA[<p>Time for some Haskell. The following expression evaluates to <code>Just 6</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="nf">fmap</span> <span class="n">sum</span> <span class="o">$</span> <span class="kt">Just</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>So does this one:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="p">(</span><span class="n">fmap</span> <span class="o">.</span> <span class="n">fmap</span><span class="p">)</span> <span class="n">sum</span> <span class="kt">Just</span> <span class="o">$</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>How does the second one work? How do the type signatures line up?</p>

<p>First consider <code>fmap . fmap</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="p">(</span><span class="o">.</span><span class="p">)</span> <span class="ow">::</span> <span class="p">(</span><span class="n">b</span> <span class="ow">-&gt;</span> <span class="n">c</span><span class="p">)</span> <span class="ow">-&gt;</span> <span class="p">(</span><span class="n">a</span> <span class="ow">-&gt;</span> <span class="n">b</span><span class="p">)</span> <span class="ow">-&gt;</span> <span class="n">a</span> <span class="ow">-&gt;</span> <span class="n">c</span>
</span><span class='line'>
</span><span class='line'><span class="nf">fmap</span> <span class="ow">::</span> <span class="kt">Functor</span> <span class="n">f</span> <span class="ow">=&gt;</span> <span class="p">(</span><span class="n">a</span> <span class="ow">-&gt;</span> <span class="n">b</span><span class="p">)</span> <span class="ow">-&gt;</span> <span class="p">(</span><span class="n">f</span> <span class="n">a</span> <span class="ow">-&gt;</span> <span class="n">f</span> <span class="n">b</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="o">.</span><span class="p">)</span> <span class="n">fmap</span> <span class="ow">::</span> <span class="kt">Functor</span> <span class="n">f</span> <span class="ow">=&gt;</span> <span class="p">(</span><span class="n">a1</span> <span class="ow">-&gt;</span> <span class="p">(</span><span class="n">a</span> <span class="ow">-&gt;</span> <span class="n">b</span><span class="p">))</span>
</span><span class='line'>                      <span class="ow">-&gt;</span> <span class="n">a1</span>
</span><span class='line'>                      <span class="ow">-&gt;</span> <span class="p">(</span><span class="n">f</span> <span class="n">a</span> <span class="ow">-&gt;</span> <span class="n">f</span> <span class="n">b</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="nf">fmap</span> <span class="o">.</span> <span class="n">fmap</span> <span class="ow">::</span> <span class="p">(</span><span class="kt">Functor</span> <span class="n">f</span><span class="p">,</span> <span class="kt">Functor</span> <span class="n">f1</span><span class="p">)</span> <span class="ow">=&gt;</span> <span class="p">(</span><span class="n">a</span> <span class="ow">-&gt;</span> <span class="n">b</span><span class="p">)</span>
</span><span class='line'>                                       <span class="ow">-&gt;</span> <span class="n">f1</span> <span class="p">(</span><span class="n">f</span> <span class="n">a</span><span class="p">)</span>
</span><span class='line'>                                       <span class="ow">-&gt;</span> <span class="n">f1</span> <span class="p">(</span><span class="n">f</span> <span class="n">b</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then <code>sum</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="nf">sum</span> <span class="ow">::</span> <span class="p">(</span><span class="kt">Num</span> <span class="n">a</span><span class="p">,</span> <span class="kt">Foldable</span> <span class="n">t</span><span class="p">)</span> <span class="ow">=&gt;</span> <span class="n">t</span> <span class="n">a</span> <span class="ow">-&gt;</span> <span class="n">a</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now apply <code>fmap . fmap</code> to <code>sum</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="p">(</span><span class="n">fmap</span> <span class="o">.</span> <span class="n">fmap</span><span class="p">)</span> <span class="n">sum</span> <span class="ow">::</span> <span class="p">(</span><span class="kt">Num</span> <span class="n">b</span><span class="p">,</span>
</span><span class='line'>                      <span class="kt">Foldable</span> <span class="n">t</span><span class="p">,</span>
</span><span class='line'>                      <span class="kt">Functor</span> <span class="n">f</span><span class="p">,</span>
</span><span class='line'>                      <span class="kt">Functor</span> <span class="n">f1</span><span class="p">)</span> <span class="ow">=&gt;</span> <span class="n">f1</span> <span class="p">(</span><span class="n">f</span> <span class="p">(</span><span class="n">t</span> <span class="n">b</span><span class="p">))</span>
</span><span class='line'>                                  <span class="ow">-&gt;</span> <span class="n">f1</span> <span class="p">(</span><span class="n">f</span> <span class="n">b</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Next, the tricky bit.
Note that <code>(a -&gt; b) ~ ((-&gt;) a b)</code>.
So the signature of <code>Just</code>, which we&rsquo;d usually write:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="kt">Just</span> <span class="ow">::</span> <span class="n">a</span> <span class="ow">-&gt;</span> <span class="kt">Maybe</span> <span class="n">a</span>
</span></code></pre></td></tr></table></div></figure>


<p>can also be expressed as:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="kt">Just</span> <span class="ow">::</span> <span class="p">(</span><span class="ow">-&gt;</span><span class="p">)</span> <span class="n">a</span> <span class="p">(</span><span class="kt">Maybe</span> <span class="n">a</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>We want the type signature for <code>(fmap . fmap) sum Just</code>.</p>

<p>Consider the signature of <code>(fmap . fmap) sum</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="o">...</span>
</span><span class='line'><span class="kt">Functor</span> <span class="n">f</span><span class="p">,</span>
</span><span class='line'><span class="kt">Functor</span> <span class="n">f1</span><span class="p">)</span> <span class="ow">=&gt;</span> <span class="n">f1</span> <span class="p">(</span><span class="n">f</span> <span class="p">(</span><span class="n">t</span> <span class="n">b</span><span class="p">))</span>
</span><span class='line'>            <span class="ow">-&gt;</span> <span class="n">f1</span> <span class="p">(</span><span class="n">f</span> <span class="n">b</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>f1</code> must have a Functor instance.</p>

<p><code>((-&gt;) a)</code> has a <a href="https://github.com/ghc/packages-base/blob/52c0b09036c36f1ed928663abb2f295fd36a88bb/GHC/Base.lhs#L234">Functor instance</a> for all a.</p>

<p><code>((-&gt;) (t b))</code>, therefore, has a Functor instance.</p>

<p>If we replace <code>f1</code> with <code>((-&gt;) (t b))</code>, we produce a more specific type signature, expressing a specialization of <code>(fmap . fmap) sum</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'>    <span class="o">...</span> <span class="ow">=&gt;</span> <span class="p">((</span><span class="ow">-&gt;</span><span class="p">)</span> <span class="p">(</span><span class="n">t</span> <span class="n">b</span><span class="p">))</span> <span class="p">(</span><span class="n">f</span> <span class="p">(</span><span class="n">t</span> <span class="n">b</span><span class="p">))</span>
</span><span class='line'>        <span class="ow">-&gt;</span> <span class="p">((</span><span class="ow">-&gt;</span><span class="p">)</span> <span class="p">(</span><span class="n">t</span> <span class="n">b</span><span class="p">))</span> <span class="p">(</span><span class="n">f</span> <span class="n">b</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>We can further specialize it by replacing <code>f</code> with Maybe.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'>    <span class="o">...</span> <span class="ow">=&gt;</span> <span class="p">((</span><span class="ow">-&gt;</span><span class="p">)</span> <span class="p">(</span><span class="n">t</span> <span class="n">b</span><span class="p">))</span> <span class="p">(</span><span class="kt">Maybe</span> <span class="p">(</span><span class="n">t</span> <span class="n">b</span><span class="p">))</span>
</span><span class='line'>        <span class="ow">-&gt;</span> <span class="p">((</span><span class="ow">-&gt;</span><span class="p">)</span> <span class="p">(</span><span class="n">t</span> <span class="n">b</span><span class="p">))</span> <span class="p">(</span><span class="kt">Maybe</span> <span class="n">b</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now consider a specialization of <code>Just</code> where <code>a ~ (t b)</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="kt">Just</span> <span class="ow">::</span> <span class="p">(</span><span class="ow">-&gt;</span><span class="p">)</span> <span class="p">(</span><span class="n">t</span> <span class="n">b</span><span class="p">)</span> <span class="p">(</span><span class="kt">Maybe</span> <span class="p">(</span><span class="n">t</span> <span class="n">b</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>If we apply the specialized <code>(fmap . fmap) sum</code> to this specialization of <code>Just</code>, we get:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'>    <span class="o">...</span> <span class="ow">=&gt;</span> <span class="p">((</span><span class="ow">-&gt;</span><span class="p">)</span> <span class="p">(</span><span class="n">t</span> <span class="n">b</span><span class="p">))</span> <span class="p">(</span><span class="kt">Maybe</span> <span class="n">b</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>which can be rewritten idiomatically as:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'>    <span class="o">...</span> <span class="ow">=&gt;</span> <span class="n">t</span> <span class="n">b</span> <span class="ow">-&gt;</span> <span class="kt">Maybe</span> <span class="n">b</span>
</span></code></pre></td></tr></table></div></figure>


<p>This leaves us with:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="p">(</span><span class="n">fmap</span> <span class="o">.</span> <span class="n">fmap</span><span class="p">)</span> <span class="n">sum</span> <span class="kt">Just</span> <span class="ow">::</span> <span class="p">(</span><span class="kt">Num</span> <span class="n">b</span><span class="p">,</span> <span class="kt">Foldable</span> <span class="n">t</span><span class="p">)</span> <span class="ow">=&gt;</span> <span class="n">t</span> <span class="n">b</span> <span class="ow">-&gt;</span> <span class="kt">Maybe</span> <span class="n">b</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[History: filtered vs unfiltered]]></title>
    <link href="http://ivanbrennan.github.io/blog/2017/08/05/command-history-filter/"/>
    <updated>2017-08-05T08:49:00-04:00</updated>
    <id>http://ivanbrennan.github.io/blog/2017/08/05/command-history-filter</id>
    <content type="html"><![CDATA[<p>I get a lot of use out of shell history. At its simplest, tapping <code>↑</code> cycles through previous commands. Incremental search (<code>C-r</code>) will retrieve matching history entries, updating as you type. There are more ways you can access history, but these two in particular have become ingrained in my workflow.</p>

<p>I&rsquo;m running Bash (for now), and have it configured to save a good deal of history:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nb">export </span><span class="nv">HISTSIZE</span><span class="o">=</span>10000
</span><span class='line'><span class="nb">shopt</span> -s histappend
</span></code></pre></td></tr></table></div></figure>


<p>When you start a shell, Bash reads <code>~/.bash_history</code> (or <code>$HISTFILE</code> if that&rsquo;s been set), initializing the in-memory history your session will interact with. When exiting the shell, new history is written to disk, making it available to future sessions. With <code>histappend</code> set, the history file is appended to rather than overwritten.</p>

<p>I&rsquo;ve also configured it to save multiline commands with embedded newlines, separated by timestamps. This makes it easy to recall and modify more complex commands, like loops and functions.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nb">export </span><span class="nv">HISTTIMEFORMAT</span><span class="o">=</span><span class="s1">&#39;%F %T &#39;</span>
</span><span class='line'><span class="nb">shopt</span> -s cmdhist lithist
</span></code></pre></td></tr></table></div></figure>


<p>Bash has a <code>HISTIGNORE</code> variable that can hold patterns you want to exclude from history. The patterns are colon-separated and treated as shell globs that must match the entire line. Multiline entries are decided based on the first line.</p>

<p>If, for example, you wanted to ignore the <code>jobs</code> builtin and any <code>ls</code> commands, you could set:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">HISTIGNORE</span><span class="o">=</span><span class="s1">&#39;jobs:ls[ ]*&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>I tried this out but quickly realized I prefer an unfiltered recent history. If I run,</p>

<pre><code>ls /path/to/some/directory
</code></pre>

<p>I want to be able to repeat <code>ls</code> on a subdirectory by tapping <code>↑</code> and appending to the path.</p>

<p>More distant history, on the other hand, could benefit from filtering. I don&rsquo;t see much value in persisting <code>ls</code> or <code>man</code> commands from one session to the next. I&rsquo;m not likely to search for them, and when I&rsquo;m reaching back into a previous session&rsquo;s history it&rsquo;s nearly always via search &mdash; either <em>reverse-search-history</em> (<code>C-r</code>) or the less well-known <em>history-search-backward</em>, which retrieves the previous command matching what you&rsquo;ve already typed, and which I&rsquo;ve bound to <code>M-p</code>.</p>

<p>The only things I&rsquo;m using <code>HISTIGNORE</code> for are commands like <code>jobs</code> and <code>fg</code>, which I tend to just retype.</p>

<h3>Filtering persisted history</h3>

<p>To keep commands like <code>ls</code> from polluting the history of future shell sessions, I&rsquo;ve written a script to filter my <code>~/.bash_history</code> when exiting the shell. The script is triggered by an <code>EXIT</code> trap in my <code>~/.bashrc</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="k">if</span> <span class="o">[[</span> <span class="nv">$-</span> <span class="o">==</span> *i* <span class="o">]]</span>; <span class="k">then</span>
</span><span class='line'><span class="k">  </span><span class="nb">trap</span> <span class="s1">&#39;$HOME/.bash_history_filter &gt;/dev/null 2&gt;&amp;1 &amp;&#39;</span> EXIT
</span><span class='line'><span class="k">fi</span>
</span></code></pre></td></tr></table></div></figure>


<p>The cryptic <code>$-</code> variable holds flags indicating which shell options are in effect, and I&rsquo;m using it to restrict the trap to interactive shells (indicated by the <code>i</code> flag). The script it runs is as follows:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="c">#!/bin/sh</span>
</span><span class='line'>
</span><span class='line'><span class="nv">tmpfile</span><span class="o">=</span><span class="k">$(</span>mktemp<span class="k">)</span>
</span><span class='line'><span class="nb">trap</span> <span class="s1">&#39;rm -f &quot;$tmpfile&quot;&#39;</span> EXIT
</span><span class='line'>
</span><span class='line'><span class="nv">awk_script</span><span class="o">=</span><span class="s2">&quot;$HOME/.bash_history_filter.awk&quot;</span>
</span><span class='line'><span class="nv">persisted_history</span><span class="o">=</span><span class="s2">&quot;${HISTFILE:-$HOME/.bash_history}&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="o">[[</span> -r <span class="s2">&quot;$awk_script&quot;</span> <span class="o">&amp;&amp;</span> -r <span class="s2">&quot;$persisted_history&quot;</span> <span class="o">]]</span>; <span class="k">then</span>
</span><span class='line'><span class="k">  </span>awk -f <span class="s2">&quot;$awk_script&quot;</span> <span class="s2">&quot;$persisted_history&quot;</span> &gt; <span class="s2">&quot;$tmpfile&quot;</span>
</span><span class='line'>
</span><span class='line'>  mv <span class="s2">&quot;$tmpfile&quot;</span> <span class="s2">&quot;$persisted_history&quot;</span>
</span><span class='line'><span class="k">fi</span>
</span></code></pre></td></tr></table></div></figure>


<p>The actual filtering logic lives in an Awk script. The shell history is run through that filter and output to a temporary file, which subsequently replaces the original history file. An exit trap will remove the temporary file if something goes wrong and the script exits before executing the <code>mv</code>.</p>

<p>Awk processes input one line at a time, splitting the line into individual fields (space-delimited by default). The fields are referenceable as <code>$1</code>, <code>$2</code>, etc. and the entire line is available in <code>$0</code>. Each line is run through the set of Awk commands you define. A common idiom, in pseudocode is:</p>

<pre><code>/pattern/ {
  # commands to run on any line matching pattern 
}

$1 ~ /word/ {
  # commands to run on any line whose first field matches word 
}
</code></pre>

<p>You can call <code>next</code> to skip any subsequent commands and jump to the next line of input. You can also set and manipulate variables to track state, accumulate text, etc. and <code>print</code> to write output. My filter is:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='awk'><span class='line'><span class="sr">/^#[[:digit:]]{10}$/</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">timestamp</span> <span class="o">=</span> <span class="o">$</span><span class="mi">0</span>
</span><span class='line'>  <span class="nx">histentry</span> <span class="o">=</span> <span class="s2">&quot;&quot;</span>
</span><span class='line'>  <span class="kr">next</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="o">$</span><span class="mi">1</span> <span class="o">~</span> <span class="sr">/^(ls?|man|cat)$/</span><span class="p">)</span> <span class="o">||</span> <span class="sr">/^[[:alpha:]]$/</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="o">!</span> <span class="nx">timestamp</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kr">print</span>
</span><span class='line'>  <span class="p">}</span> <span class="nx">else</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">histentry</span> <span class="o">=</span> <span class="o">$</span><span class="mi">0</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="kr">next</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">timestamp</span> <span class="p">{</span>
</span><span class='line'>  <span class="kr">print</span> <span class="nx">timestamp</span>
</span><span class='line'>  <span class="nx">timestamp</span> <span class="o">=</span> <span class="s2">&quot;&quot;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">histentry</span> <span class="p">{</span>
</span><span class='line'>  <span class="kr">print</span> <span class="nx">histentry</span>
</span><span class='line'>  <span class="nx">histentry</span> <span class="o">=</span> <span class="s2">&quot;&quot;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">{</span> <span class="kr">print</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>It&rsquo;s essentially a state-machine.</p>

<p><img class="state-machine" src="http://ivanbrennan.github.io/images/history-filter/state-machine.png" title="state-machine" alt="state-machine"></p>

<p>Getting the Awk script just right took some work, and I found it helpful to have some <a href="https://github.com/ivanbrennan/dotfiles/blob/master/shell/filter_test">automated tests</a> at my back as I fiddled with it.</p>

<p>When processing multiline entries, I decided that if a command is complex enough to warrant mutliple lines, it&rsquo;s worth remembering, even if its first line matches an &ldquo;uninteresting&rdquo; pattern. The &ldquo;uninteresting&rdquo; predicate ended up as:</p>

<pre><code>($1 ~ /^(ls?|man|cat)$/) || /^[[:alpha:]]$/
</code></pre>

<p>This matches some commands that are uninteresting with or without arguments, any line that consists of a single letter. I have some functions/aliases I use &mdash; <code>v</code> for (neo)vim, <code>e</code> for emacs, <code>t</code> for tmux &mdash; which aren&rsquo;t very interesting by themselves, but could have interesting arguments. I frequently use <code>C-r</code>, for example, to recall/reuse a previous <code>tmux new-session</code> command:</p>

<pre><code>t new-session -s ruby-project -c /path/to/ruby-project
</code></pre>

<p>I tried out Sed as an alternative to Awk for this use, but decided against it. Sed has an extremely terse syntax and fought me most of the way. I finally found a couple ways to make it work, but they&rsquo;re pretty gnarly. If you install GNU Sed, you can tell Sed to treat lines as separated by NULL bytes. The entire file will be slurped into a single &ldquo;line&rdquo; on which you can apply substitution:</p>

<pre><code>gsed --null-data \
     --regexp-extended \
     's/(#[0-9]{10}\n((cat|ls?|man)([^[:alnum:]][^\n]*)?|[[:alpha:]])\n)+(#[0-9]{10}\n|$)/\5/g' \
     "$infile" &gt;"$outfile"
</code></pre>

<p>Sed implementations that don&rsquo;t have the NULL byte trick up their sleeve (e.g. BSD Sed), will instead have to juggle data back and forth between the &ldquo;hold-space&rdquo; and &ldquo;pattern-space&rdquo;. I scripted this out of morbid curiosity, but I wouldn&rsquo;t wish it on anyone:</p>

<pre><code>sed -E -f horrendous.sed "$infile" &gt;"$outfile"
</code></pre>

<p>with the following <code>horrendous.sed</code> script:</p>

<pre><code>$ {
  1 h
  1!H
  x
  /^#[[:digit:]]{10}\n((ls?|cat|man)([^[:alnum:]][[:print:]]*)?|[[:alpha:]])$/ d
  p
}

/^#[[:digit:]]{10}$/ !{
  1 h
  1!H
  d
}

x
/^$/ d
/^#[[:digit:]]{10}$/ d
/^#[[:digit:]]{10}\n((ls?|cat|man)([^[:alnum:]][[:print:]]*)?|[[:alpha:]])$/ d
</code></pre>

<p>Benchmarking the Awk, GNU Sed, and Sed solutions on a 50,000 line file:</p>

<pre><code>awk  0.070s
gsed 0.060s
sed  0.080s
</code></pre>

<p>Awk is the best choice, I think. GNU Sed can shave 10 milliseconds off the run time, but the extra dependency and the 80+ character regex aren&rsquo;t worth it.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Shell: while loops and variables]]></title>
    <link href="http://ivanbrennan.github.io/blog/2017/06/03/shell-while-loops-and-variables/"/>
    <updated>2017-06-03T11:22:00-04:00</updated>
    <id>http://ivanbrennan.github.io/blog/2017/06/03/shell-while-loops-and-variables</id>
    <content type="html"><![CDATA[<p>A common idiom in shell scripting is to tweak the value of <code>IFS</code> (internal field separator) while reading lines of input:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="k">while </span><span class="nv">IFS</span><span class="o">=</span> <span class="nb">read</span> -r line
</span><span class='line'><span class="k">do</span>
</span><span class='line'>    <span class="c"># ...</span>
</span><span class='line'><span class="k">done</span>
</span></code></pre></td></tr></table></div></figure>


<p>This leads to questions about <code>IFS</code> itself and the <code>-r</code> flag, and there are plenty of good answers out there. I&rsquo;d like to focus, however, on the <em>syntax</em> of <code>IFS=</code> and it&rsquo;s location in the above line.</p>

<p>Shell variables can be assigned and referenced:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>&gt; <span class="nv">var</span><span class="o">=</span>A
</span><span class='line'>&gt; <span class="nb">echo</span> <span class="nv">$var</span>
</span><span class='line'>A
</span></code></pre></td></tr></table></div></figure>


<p>Sometimes you want to set a variable for the duration of a single command:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>&gt; <span class="nv">name</span><span class="o">=</span>Bob bash -c <span class="s1">&#39;echo $name&#39;</span>
</span><span class='line'>Bob
</span><span class='line'>&gt; <span class="nb">echo</span> <span class="nv">$name</span>
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure>


<p>At first glance, you might expect the first line of our <code>while</code> loop to look like:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">IFS</span><span class="o">=</span> <span class="k">while </span><span class="nb">read</span> -r line
</span></code></pre></td></tr></table></div></figure>


<p>but this causes a syntax error. In the <code>name=Bob</code> example, our entire line consisted of a single <a href="http://pubs.opengroup.org/onlinepubs/9699919799/utilities/V3_chap02.html#tag_18_09_01">simple command</a>, defined as</p>

<blockquote><p>a sequence of optional variable assignments and redirections, in any sequence, optionally followed by words and redirections, terminated by a control operator.</p></blockquote>

<p>The <code>while</code> loop, however, is a <a href="http://pubs.opengroup.org/onlinepubs/9699919799/utilities/V3_chap02.html#tag_18_09_04">compound command</a>, with the format:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="k">while </span>compound-list-1
</span><span class='line'><span class="k">do</span>
</span><span class='line'><span class="k">    </span>compound-list-2
</span><span class='line'><span class="k">done</span>
</span></code></pre></td></tr></table></div></figure>


<p>with <code>compound-list-1</code> being a sequence of <a href="http://pubs.opengroup.org/onlinepubs/9699919799/utilities/V3_chap02.html#tag_18_09_03">lists</a>. A list is defined as</p>

<blockquote><p>a sequence of one or more AND-OR lists separated by the operators &lsquo;;&rsquo; and &lsquo;&amp;&rsquo;.</p></blockquote>

<p>with an <code>AND-OR</code> list being</p>

<blockquote><p>a sequence of one or more pipelines separated by the operators &ldquo;&amp;&amp;&rdquo; and &ldquo;||&rdquo; .</p></blockquote>

<p>A <a href="http://pubs.opengroup.org/onlinepubs/9699919799/utilities/V3_chap02.html#tag_18_09_02">pipeline</a>, in turn, has the format:</p>

<blockquote><p>[!] command1 [ | command2 &hellip;]</p></blockquote>

<p>It feels like we&rsquo;re going in circles, but the long and short of it is that we can view</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="k">while </span><span class="nv">IFS</span><span class="o">=</span> <span class="nb">read</span> -r line
</span></code></pre></td></tr></table></div></figure>


<p>as</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="k">while </span>simple-command
</span></code></pre></td></tr></table></div></figure>


<p>Note that this means we&rsquo;re setting <code>IFS</code> to a temporary value only during the <code>read</code> command, not during the body of the loop.</p>

<p>To make this a little more concrete, here&rsquo;s a script I&rsquo;ve called <code>while-vars.sh</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">var</span><span class="o">=</span>A
</span><span class='line'><span class="nv">i</span><span class="o">=</span>1
</span><span class='line'>
</span><span class='line'>tester<span class="o">()</span> <span class="o">{</span>
</span><span class='line'>  <span class="nb">echo</span> <span class="s2">&quot;var in tester: $var&quot;</span>
</span><span class='line'>  <span class="o">((</span> <span class="nv">$i</span> &gt; 0 <span class="o">))</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="nb">echo</span> -e <span class="s2">&quot;var before loop: $var\n&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">while </span><span class="nv">var</span><span class="o">=</span>B tester; <span class="k">do</span>
</span><span class='line'><span class="k">  </span><span class="nb">let </span>i-<span class="o">=</span>1
</span><span class='line'>  <span class="nb">echo</span> <span class="s2">&quot;var in loop: $var&quot;</span>
</span><span class='line'><span class="k">done</span>
</span><span class='line'>
</span><span class='line'><span class="nb">echo</span> -e <span class="s2">&quot;\nvar after loop: $var&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>The result:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>&gt; bash <span class="k">while</span>-vars.sh
</span><span class='line'>var before loop: A
</span><span class='line'>
</span><span class='line'>var in tester: B
</span><span class='line'>var in loop: A
</span><span class='line'>var in tester: B
</span><span class='line'>
</span><span class='line'>var after loop: A
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Debugging etags]]></title>
    <link href="http://ivanbrennan.github.io/blog/2016/12/20/debugging-etags/"/>
    <updated>2016-12-20T07:52:00-05:00</updated>
    <id>http://ivanbrennan.github.io/blog/2016/12/20/debugging-etags</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve been using ctags to navigate the codebases I work with in Vim for a couple years, largely thanks to a <a href="http://tbaggery.com/2011/08/08/effortless-ctags-with-git.html">blog post</a> by Tim Pope where he describes how to use git hooks to keep your tags up-to-date. Omitting a few details, the script I use boils down to this:</p>

<pre><code>git ls-files | ctags -L - -o ".git/tags" --tag-relative=yes --languages=-javascript,sql
</code></pre>

<p>On a large Rails app I&rsquo;ve been working with, it takes 1 second and generates a 7MB tags file.</p>

<p>More recently, I started playing around with Emacs, and I&rsquo;ve been looking for a way to port my tagging strategy over to <em>e</em>tags. There are a few ways you can generate etags. Emacs comes with its own <code>etags</code> executable, but the more featureful implementations of ctags can also generate them.</p>

<p>I&rsquo;ve been using <a href="https://github.com/universal-ctags/ctags">universal-ctags</a>, which picked up where <a href="http://ctags.sourceforge.net">exuberant-ctags</a> left off a few years ago, so I added <code>-e</code> to my tagging command and gave it a whirl. 90 seconds later it handed me an <strong><em>8GB</em></strong> tags file.</p>

<p>At first, I thought this must be a problem with the etags format itself, but when I tried Emacs&#8217; own <code>etags</code> executable, it took 13 seconds and produced a 3MB file. Next, I tried exuberant-ctags, which took 2 seconds and produced a 1MB file.</p>

<p>Narrowing in on the problem further was an interesting process that called on several shell-scripting concepts and tools, including I/O redirection, sub-shells, and <code>awk</code>.</p>

<h2>Benchmarking</h2>

<p>First, I needed to gather some data profiling each file&rsquo;s contribution to execution time and tags-size. I wanted something like,</p>

<pre><code>some_file.rb &lt;- source-file
0.004        &lt;- processing time (seconds)
8159         &lt;- source file-size (bytes)
13389        &lt;- tags file-size (bytes)

another_file.rb
0.002
345
4859

...
</code></pre>

<p>I wrote a shell script to iterate through the files, generating tags for each and recording the time taken and resulting tags size, appending these stats to a log file.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="c">#!/bin/sh</span>
</span><span class='line'>
</span><span class='line'><span class="k">for </span>f in <span class="k">$(</span>git ls-files<span class="k">)</span>
</span><span class='line'><span class="k">do</span>
</span><span class='line'>  <span class="o">(</span> <span class="nb">echo</span> <span class="s2">&quot;$f&quot;</span>
</span><span class='line'>    <span class="o">(</span> <span class="nv">TIMEFORMAT</span><span class="o">=</span><span class="s1">&#39;%R&#39;</span>
</span><span class='line'>      <span class="nb">time </span>ctags -e -o tmp.TAGS --tag-relative<span class="o">=</span>yes --languages<span class="o">=</span>-javascript,sql <span class="nv">$f</span> <span class="o">)</span>
</span><span class='line'>    <span class="o">(</span> ls -l <span class="nv">$f</span>
</span><span class='line'>      ls -l tmp.TAGS <span class="o">)</span> | awk <span class="s1">&#39;{ print $5 }&#39;</span>
</span><span class='line'>    <span class="nb">echo</span> <span class="o">)</span> &gt;&gt; etagging.log 2&gt;&amp;1
</span><span class='line'>  rm tmp.TAGS
</span><span class='line'><span class="k">done</span>
</span></code></pre></td></tr></table></div></figure>


<p>I&rsquo;ll break this down a bit. First, we run <code>git ls-files</code> in a sub-shell to generate a list of files to loop through.</p>

<pre><code>for f in $(git ls-files)
</code></pre>

<p>For each file, we run some commands (<code>echo</code>, <code>time</code>, <code>ctags</code>, <code>ls</code>) and redirect their output to a log file. This could be done like,</p>

<pre><code>run a command &gt;&gt; etagging.log
run another command &gt;&gt; etagging.log
run one more command &gt;&gt; etagging.log
</code></pre>

<p>but using a sub-shell lets us capture it all in one go:</p>

<pre><code>( run a command
  run another command
  run one more command ) &gt;&gt; etagging.log
</code></pre>

<h3>Time and redirection</h3>

<p>Using the <code>time</code> <a href="https://en.wikipedia.org/wiki/Shell_builtin">builtin</a> to benchmark tags creation introduces a little more complexity. We only want the real (perceived) time, so we need to set the <code>TIMEFORMAT</code> shell variable accordingly.</p>

<p>Since <code>time</code> broadcasts its results through stderr rather than stdout, we can&rsquo;t rely on just <code>&gt;&gt;</code>, which redirects stdout, or our time data would print to screen rather than being recorded. So once we&rsquo;ve redirected stdout to the log-file, we need to redirect stderr there as well.</p>

<pre><code>( run a command
  run another command
  run one more command ) &gt;&gt; etagging.log 2&gt;&amp;1
</code></pre>

<p>You could read this as,</p>

<blockquote><p>run commands in a sub-shell, send the sub-shell&rsquo;s standard output to the log-file, and send its standard error data to the same location you&rsquo;re sending the standard output (i.e. the log-file)</p></blockquote>

<p>The digits in <code>2&gt;&amp;1</code> are <a href="https://en.wikipedia.org/wiki/File_descriptor">file descriptors</a>, indicating stderr (<code>2</code>) and stdout (<code>1</code>). A running process has 3 standard I/O streams through which to communicate. As a source of input, it has stdin (<code>0</code>); when it&rsquo;s ready to broadcast some output, it <em>generally</em> sends that to stdout (<code>1</code>), but <em>some</em> output is semantically different (e.g. error messages), and it&rsquo;s useful to have a separate stream for such data. This is where stderr (<code>2</code>) comes in.</p>

<p>If you&rsquo;re familiar with pointers in C, you could think of <code>&amp;1</code> as the location of stdout, so <code>2&gt;&amp;1</code> says to redirect stderr to the same place that stdout is headed. The order of redirection operations is significant. If we&rsquo;d written,</p>

<pre><code>( run some commands ) 2&gt;&amp;1 &gt;&gt; etagging.log
</code></pre>

<p>we&rsquo;d be directing stderr to the same location as stdout and then directing stdout elsewhere. It would be like saying,</p>

<blockquote><p>Hey stderr, ask stdout where it&rsquo;s currently headed. Go there.</p>

<p>Hey stdout, change of plans: I want you to go to this log-file.</p></blockquote>

<h3>Space and a little awk</h3>

<p>We also want to record the size of the source-file and the size of the tags-file. We use <code>awk</code> to extract these sizes (in bytes) from the 5th field of long-format <code>ls</code> file-listings:</p>

<pre><code>( ls -l $f
  ls -l tmp.TAGS ) | awk '{ print $5 }'
</code></pre>

<h2>Sorting the results</h2>

<p>Once I had the profiling data, I wanted to sort it by time and tag-size to see which files were causing the big slowdown and eating up my diskspace. The <code>sort</code> command expects newline-separated records with whitespace-separated fields. I used <code>awk</code> to translate the results to the horizontal format <code>sort</code> expects.</p>

<pre><code>awk 'BEGIN { RS=""; FS="\n" } { print $1, $2, $3, $4 }' etagging.log
</code></pre>

<p>The <code>BEGIN</code> block to sets up awk&rsquo;s <code>RS</code> (record-separator) and <code>FS</code> (field-separator) variables, allowing it to correctly identify each record. The next block defines the actions to take on each record. In this case I just want to print each of its fields on a single line. Piping this into <code>sort</code> generates results sorted by time:</p>

<pre><code>awk 'BEGIN { RS=""; FS="\n" } { print $1, $2, $3, $4 }' etagging.log | sort -nrk2 &gt; etagging-time
</code></pre>

<p>Here I&rsquo;m telling <code>sort</code> to sort numerically, in reverse order, treating the 2nd field as the sort-key. I did the same for tag file size, the 4th field:</p>

<pre><code>awk 'BEGIN { RS=""; FS="\n" } { print $1, $2, $3, $4 }' etagging.log | sort -nrk4 &gt; etagging-size
</code></pre>

<h2>Identifying the Culprit</h2>

<p>Here&rsquo;s what floated to the top:</p>

<pre><code>$ head -n 3 etagging-time
app/models/something_big.json 108.024 273517 8084569921
vendor/assets/stylesheets/bootstrap/bootstrap.min.css 2.159 118153 288792277
app/models/appointment.rb 0.252 10096 2481

$ head -n 3 etagging-size
app/models/something_big.json 108.024 273517 8084569921
vendor/assets/stylesheets/bootstrap/bootstrap.min.css 2.159 118153 288792277
vendor/assets/stylesheets/intlTelInput.css 0.051 18194 5464144
</code></pre>

<p>The two top offenders, by both time and by size, were a large JSON file and a minified bootstrap stylesheet, neither of which I had much interest in tagging. The JSON file outshadowed everything else by miles, and that shed some light on the performance disparity between universal-ctags and the other tagging libraries: only universal-ctags had JSON support, so it was the only one tagging JSON at all.</p>

<p>A quick fix was to add JSON to the languages I exclude from tagging, but it begged the question, why didn&rsquo;t <em>c</em>tags exhibit the same problem as <em>e</em>tags?</p>

<p>The hint was hiding in that <em>minified</em> stylesheet. The JSON file and the stylesheet had extremely long lines. Both ctags and etags include source line references, and these references get truncated to a reasonable length when generating <em>c</em>tags, but not when generating <em>e</em>tags.</p>

<h3>Conclusion</h3>

<p>The team at <a href="https://github.com/universal-ctags/ctags">universal-ctags</a> was incredibly helpful in debugging this and helped turn a source of frustration into a learning experience. They were quick to respond and are looking into resolving the underlying issue. In the meantime, I&rsquo;ve adjusted my command for generating <em>e</em>tags.</p>

<pre><code>git ls-files | ctags -L - -e -o ".git/etags" --tag-relative=yes --languages=-javascript,sql,json,css
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[karabiner]]></title>
    <link href="http://ivanbrennan.github.io/blog/2015/06/06/karabiner/"/>
    <updated>2015-06-06T14:45:00-04:00</updated>
    <id>http://ivanbrennan.github.io/blog/2015/06/06/karabiner</id>
    <content type="html"><![CDATA[<p>A while back I stopped using &ldquo;jk&rdquo; to exit Vim&rsquo;s insert-mode, turning instead to the mostly-useless <code>Caps Lock</code>. I set it to be <code>Control</code>, then used <a href="https://pqrs.org/osx/karabiner/">Karabiner</a> to turn it into a dual-purpose <code>Control</code>/<code>Escape</code>. Typed by itself, it&rsquo;s <code>Escape</code>; in concert with another key it&rsquo;s <code>Control</code>. The boost in comfort and productivity has been huge.</p>

<p>Bringing <code>Escape</code> closer to home feels like a more sensible solution, and I&rsquo;m no longer typing &ldquo;jk&rdquo; all over the place when my fingers forget they&rsquo;re not in Vim. The productivity gains, however, are largely the result of having a <code>Control</code> key that&rsquo;s so accessible. It&rsquo;s opened up my use of control-modified commands like Vim&rsquo;s autocompletion and the shell&rsquo;s reverse-incremental-search quite a bit.</p>

<p>To set this up on OS X, first go to the Keyboard pane of System Preferences and change <code>Caps Lock</code> to <code>Control</code>.</p>

<p><img class="caps-lock" src="http://ivanbrennan.github.io/images/karabiner/caps-lock.png" title="caps-lock" alt="caps-lock"></p>

<p>Then use Karabiner to send <code>Escape</code> when you type <code>Control</code> by itself.</p>

<pre><code>* karabiner preferences -&gt; "Change Key" tab
* scroll down to "Change Control_L Key (Left Control)"
* check "Control_L to Control_L (+ When you type Control_L only, send Escape)"
</code></pre>

<p><img class="escape" src="http://ivanbrennan.github.io/images/karabiner/escape.png" title="escape" alt="escape"></p>

<h2>More Control</h2>

<p>I recently took this one step further and turned my <code>Return</code> key into a dual-purpose <code>Control</code>/<code>Return</code>, giving me easy access to a <code>Control</code> key on either side of the keyboard.</p>

<p><img class="return" src="http://ivanbrennan.github.io/images/karabiner/return.png" title="return" alt="return"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[unix know-how]]></title>
    <link href="http://ivanbrennan.github.io/blog/2014/11/04/unix-know-how/"/>
    <updated>2014-11-04T22:48:00-05:00</updated>
    <id>http://ivanbrennan.github.io/blog/2014/11/04/unix-know-how</id>
    <content type="html"><![CDATA[<p>I was working with MySQL queries that involved timezone conversion when I noticed that my local instance of MySQL didn&rsquo;t recognize named timezones. Queries with named timezones were returning <code>null</code>, while those with numeric offsets from UTC were returning correct conversions:</p>

<pre><code>&gt; SELECT CONVERT_TZ('2014-01-01 12:00:00', 'America/New_York', 'UTC');
=&gt; null

&gt; SELECT CONVERT_TZ('2014-01-01 12:00:00', '-5:00', '+00:00');
=&gt; 2014-01-01 17:00:00
</code></pre>

<p>I hadn&rsquo;t loaded my system&rsquo;s zoneinfo files into the <code>mysql</code> database. As per the <a href="http://dev.mysql.com/doc/refman/5.5/en/time-zone-support.html">docs</a>, I used the <code>mysql_tzinfo_to_sql</code> utility to load them from <code>/usr/share/zoneinfo</code>:</p>

<pre><code>$ mysql_tzinfo_to_sql /usr/share/zoneinfo | mysql -u root mysql
</code></pre>

<p>The process failed before loading all the tables:</p>

<pre><code>ERROR 1406 (22001) at line 38408: Data too long for column 'Abbreviation' at row 1
</code></pre>

<p>Now I could reference <code>America/New_York</code>, but not <code>UTC</code>, since the process had failed before loading that table. A coworker suggested I write the command&rsquo;s output to a file so I could debug:</p>

<pre><code>$ mysql_tzinfo_to_sql /usr/share/zoneinfo &gt; debuggingfile
</code></pre>

<p>The <code>debuggingfile</code> contained many insert statements, and line 38408 revealed the problem:</p>

<pre><code>INSERT INTO time_zone_transition_type (Time_zone_id, Transition_type_id, Offset, Is_DST, Abbreviation) VALUES (@time_zone_id, 0, 0, 0, 'Local time zone must be set--see zic manual page');
</code></pre>

<p>The <code>'Local time zone must be set--see zic manual page'</code> value was too long for the Abbreviation column. I shortened it to <code>'unset'</code>, fed the file into mysql, and all was well.</p>

<pre><code>$ mysql -u root mysql &lt; debuggingfile
</code></pre>

<p>I was struck by the simplicity of this solution, and how a little unix know-how can demystify a problem.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[search &amp; replace]]></title>
    <link href="http://ivanbrennan.github.io/blog/2014/11/04/search-and-replace/"/>
    <updated>2014-11-04T08:05:00-05:00</updated>
    <id>http://ivanbrennan.github.io/blog/2014/11/04/search-and-replace</id>
    <content type="html"><![CDATA[<p>Performing a project-wide search-and-replace is a common task, and yet I still forget how to do it in Vim. While there&rsquo;s not that much to it (build an argument list of relevant files and run a global substitution across them), I&rsquo;ve had to look it up enough times to start wondering if there&rsquo;s a better way. I ended up writing a shell function, as well as a Ruby-specific wrapper for it.</p>

<p>Now if I want to rename a function across my project&rsquo;s javascript files, I can drop onto the command-line and run:</p>

<pre><code>$ greplace **.js uglyFunctionName nicerFunctionName
</code></pre>

<p>Or, if I&rsquo;m renaming a Ruby method:</p>

<pre><code>$ rupl bad_method_name good_method_name
</code></pre>

<h2>The Sauce</h2>

<p>Using <code>find</code>, <code>grep</code>, and <code>sed</code> in concert, we declare which files to search, what to search for, and what to do with those files that contain a match.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>greplace<span class="o">()</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="o">[</span> <span class="s2">&quot;$#&quot;</span> !<span class="o">=</span> 3 <span class="o">]</span>; <span class="k">then</span>
</span><span class='line'><span class="k">    </span><span class="nb">echo</span> <span class="s2">&quot;Usage: greplace file_pattern search_pattern replacement&quot;</span>
</span><span class='line'>    <span class="k">return </span>1
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'><span class="k">    </span><span class="nv">file_pattern</span><span class="o">=</span><span class="nv">$1</span>
</span><span class='line'>    <span class="nv">search_pattern</span><span class="o">=</span><span class="nv">$2</span>
</span><span class='line'>    <span class="nv">replacement</span><span class="o">=</span><span class="nv">$3</span>
</span><span class='line'>
</span><span class='line'>    <span class="c"># This is built for BSD grep and the sed bundled with OS X.</span>
</span><span class='line'>    <span class="c"># GNU grep takes -Z instead of --null, and other versions of sed may not support the -i &#39;&#39; syntax.</span>
</span><span class='line'>
</span><span class='line'>    find . -name <span class="s2">&quot;$file_pattern&quot;</span> -exec grep -lw --null <span class="s2">&quot;$search_pattern&quot;</span> <span class="o">{}</span> + |
</span><span class='line'>    xargs -0 sed -i <span class="s1">&#39;&#39;</span> <span class="s2">&quot;s/[[:&lt;:]]$search_pattern[[:&gt;:]]/$replacement/g&quot;</span>
</span><span class='line'>  <span class="k">fi</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'>rupl<span class="o">()</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="o">[</span> <span class="s2">&quot;$#&quot;</span> !<span class="o">=</span> 2 <span class="o">]</span>; <span class="k">then</span>
</span><span class='line'><span class="k">    </span><span class="nb">echo</span> <span class="s2">&quot;Usage: rupl search_pattern replacement&quot;</span>
</span><span class='line'>    <span class="k">return </span>1
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'><span class="k">    </span><span class="nv">search_pattern</span><span class="o">=</span><span class="nv">$1</span>
</span><span class='line'>    <span class="nv">replacement</span><span class="o">=</span><span class="nv">$2</span>
</span><span class='line'>
</span><span class='line'>    greplace <span class="s1">&#39;**.rb&#39;</span> <span class="s2">&quot;$search_pattern&quot;</span> <span class="s2">&quot;$replacement&quot;</span>
</span><span class='line'>  <span class="k">fi</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Ingredients</h2>

<p>The first thing <code>greplace</code> does is test whether it received the wrong number of arguments: <code>[ "$#" != 3 ]</code>. If so, we print a usage message and return an error code. Otherwise, we set some local variables with more memorable names than <code>1</code>, <code>2</code>, and <code>3</code>.</p>

<p>Next, we <code>find</code> pathnames in the current directory (and subdirectories) that match <code>file_pattern</code>. Using <code>find ... --exec &lt;command&gt; {};</code> lets us run a command on each found path, expanding <code>{}</code> to the pathname. Replacing <code>;</code> with <code>+</code> will instead expand <code>{}</code> to as many of the found pathnames as possible, which allows us to feed all the found files as arguments to a single <code>grep</code>.</p>

<p>We <code>grep</code> the relevant files for <code>search_pattern</code>, restricting results to the names of files (<code>-l</code>) that contain a whole-word (<code>-w</code>) match. We also print a <a href="http://en.wikipedia.org/wiki/Null_character">null-character</a> after each filename in the results (<code>--null</code>), which will be useful as a delimiter in the next step.</p>

<p>The results of <code>grep</code> are piped into <code>xargs -0</code>, which constructs an argument list (recognizing the null-character delimiter) and feeds this list to <code>sed</code> for further processing.</p>

<p>We then use <code>sed -i</code> to edit each file &ldquo;in place&rdquo; (rather than writing results to stdout) without creating any backup files (<code>''</code>), which could be risky, but since I&rsquo;m working with Git this seems reasonable.</p>

<p>The actual search-and-replace is simply a pattern substitution. The <code>[[:&lt;:]]</code> and <code>[[:&gt;:]]</code> delimiters restrict it to whole-word matches.</p>

<h2>Caveats</h2>

<p>A few things limit this function&rsquo;s portability. For one, not all versions of <code>grep</code> recognize the <code>--null</code> flag. GNU grep uses <code>-Z</code> instead. Also, the <code>-i ''</code> syntax may not be recognized by all versions of <code>sed</code> (actually, from what I was able to gather, that syntax might be unique to the version bundled with OSX).</p>

<p>That being said, it would only take a few minor tweaks to get this working on a different system.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Faster Specs]]></title>
    <link href="http://ivanbrennan.github.io/blog/2014/10/27/faster-specs/"/>
    <updated>2014-10-27T22:23:00-04:00</updated>
    <id>http://ivanbrennan.github.io/blog/2014/10/27/faster-specs</id>
    <content type="html"><![CDATA[<p>Getting the full benefits of <a href="http://en.wikipedia.org/wiki/Test-driven_development">TDD</a> requires fast-running specs. The feedback cycle is what makes the difference between a pleasurable &ldquo;red-green-refactor&rdquo; flow and an eternity of testing-tedium where the only reason you&rsquo;re <em>writing</em> tests is so you be <em>done</em> writing them. While TDD is lauded in the Rails community, many large Rails apps suffer from slow-running test suites.</p>

<p>I&rsquo;ve been working with a Rails app that has a couple of bloated, callback-ridden models. Much of the test-suite uses FactoryGirl, and generating test objects for those big models and their associations can slow things down to a crawl. So when a new feature came along, I took the opportunity to write some fast unit-tests in a different style.</p>

<h3>Couch-Surfer</h3>

<p>Imagine an app that logs the journeys of world-travellers (lots of them) as they couch-surf around the globe visiting homebody friends. Each traveller periodically sends a postcard to their next host to let them know how far off they are. We have a few persisted models: Traveller, Homebody, CouchCrash, and Postcard.</p>

<p>The Traveller and Homebody models are rather large, so I&rsquo;ve abbreviated them here:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Traveller</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'>  <span class="n">has_many</span> <span class="ss">:couch_crashes</span>
</span><span class='line'>  <span class="n">has_many</span> <span class="ss">:homebodies</span><span class="p">,</span> <span class="ss">through</span><span class="p">:</span> <span class="ss">:couch_crashes</span>
</span><span class='line'>  <span class="c1"># and many more associations, validations, callbacks...</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Homebody</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'>  <span class="n">has_many</span> <span class="ss">:couch_crashes</span>
</span><span class='line'>  <span class="c1"># and many more associations, validations, callbacks...</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>CouchCrash and Postcard are pretty small, despite their associations with the larger models:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">CouchCrash</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'>  <span class="n">belongs_to</span> <span class="ss">:traveller</span>
</span><span class='line'>  <span class="n">belongs_to</span> <span class="ss">:homebody</span>
</span><span class='line'>  <span class="n">has_many</span> <span class="ss">:postcards</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">validates_presence_of</span> <span class="ss">:traveller</span><span class="p">,</span> <span class="ss">:homebody</span><span class="p">,</span> <span class="ss">:arrival_date</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Postcard</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'>  <span class="n">belongs_to</span> <span class="ss">:traveller</span>
</span><span class='line'>  <span class="n">belongs_to</span> <span class="ss">:couch_crash</span>
</span><span class='line'>  <span class="n">belongs_to</span> <span class="ss">:homebody</span><span class="p">,</span> <span class="ss">through</span><span class="p">:</span> <span class="ss">:couch_crash</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">validates_presence_of</span> <span class="ss">:traveller</span><span class="p">,</span> <span class="ss">:couch_crash</span><span class="p">,</span> <span class="ss">:distance</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Each visit, or <code>couch_crash</code>, is scheduled with an <code>arrival_date</code>. But these aren&rsquo;t always accurate, as it&rsquo;s hard to know exactly when the traveller will reach their destination. We&rsquo;d like to add a feature that assesses the status of a visit as &ldquo;far off&rdquo;, &ldquo;approaching&rdquo;, or &ldquo;in progress&rdquo; based on the arrival date and available postcards. We won&rsquo;t bother with a &ldquo;completed&rdquo; status since couch-crashers have been known to stick around forever.</p>

<p>For simplicity&rsquo;s sake, we&rsquo;ll say any visit whose arrival date is more than a week away is &ldquo;far off&rdquo;. Within a week of the arrival date, an &ldquo;approaching&rdquo; status requires a postcard from within 100 miles and &ldquo;in Progress&rdquo; requires one within 5 miles (I know, that&rsquo;s a waste of a stamp). Otherwise, with either no postcards or only those over 100 miles away, the visit remains &ldquo;far off&rdquo;.</p>

<h3>Approaching the spec</h3>

<p>A spec for the &ldquo;approaching&rdquo; status using FactoryGirl might look like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">describe</span> <span class="no">CouchCrash</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">describe</span> <span class="s1">&#39;#status&#39;</span> <span class="k">do</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">context</span> <span class="s1">&#39;within 1 week of arrival date&#39;</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">context</span> <span class="s1">&#39;with a postcard from 100 miles away&#39;</span> <span class="k">do</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">it</span> <span class="s1">&#39;is &quot;approaching&quot;&#39;</span> <span class="k">do</span>
</span><span class='line'>          <span class="n">visit</span> <span class="o">=</span> <span class="no">FactoryGirl</span><span class="o">.</span><span class="n">build</span><span class="p">(</span><span class="ss">:couch_crash</span><span class="p">,</span> <span class="n">arrival_date</span><span class="p">:</span> <span class="mi">1</span><span class="o">.</span><span class="n">week</span><span class="o">.</span><span class="n">from_now</span><span class="p">)</span>
</span><span class='line'>          <span class="n">postcard_100</span> <span class="o">=</span> <span class="no">FactoryGirl</span><span class="o">.</span><span class="n">build</span><span class="p">(</span><span class="ss">:postcard</span><span class="p">,</span> <span class="ss">distance</span><span class="p">:</span> <span class="mi">100</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>          <span class="n">visit</span><span class="o">.</span><span class="n">stub</span><span class="p">(</span><span class="ss">:postcards</span><span class="p">)</span><span class="o">.</span><span class="n">and_return</span><span class="p">(</span><span class="o">[</span><span class="n">postcard_100</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>          <span class="n">expect</span><span class="p">(</span><span class="n">visit</span><span class="o">.</span><span class="n">status</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">eq</span><span class="p">(</span><span class="ss">:approaching</span><span class="p">)</span>
</span><span class='line'>        <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Using <code>build</code> rather than <code>create</code> should keep us from hitting the database. Stubbing the association between <code>visit</code> and its postcards should do the same. On the surface, this looks like a well-isolated, fast unit-test, but let&rsquo;s take a closer look at the factories we&rsquo;re using:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># spec/factories/couch_crashes.rb</span>
</span><span class='line'><span class="no">FactoryGirl</span><span class="o">.</span><span class="n">define</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">factory</span> <span class="ss">:couch_crash</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">traveller</span>
</span><span class='line'>    <span class="n">homebody</span>
</span><span class='line'>    <span class="n">arrival_date</span> <span class="mi">2</span><span class="o">.</span><span class="n">weeks</span><span class="o">.</span><span class="n">from_now</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># spec/factories/post_cards.rb</span>
</span><span class='line'><span class="no">FactoryGirl</span><span class="o">.</span><span class="n">define</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">factory</span> <span class="ss">:post_card</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">traveller</span>
</span><span class='line'>    <span class="n">couch_crash</span>
</span><span class='line'>    <span class="n">distance</span> <span class="mi">300</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>It&rsquo;s best practice to define your factories with the minimum set of attributes necessary for a valid object. You don&rsquo;t want to set land-mines for the next developer that comes along and calls <code>create</code>. So the couch_crashes factory generates associated traveller and homebody objects. In doing so, it involves two of our most bloated models. Take a look at their factories:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># spec/factories/travellers.rb</span>
</span><span class='line'><span class="no">FactoryGirl</span><span class="o">.</span><span class="n">define</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">factory</span> <span class="ss">:traveller</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">first_name</span> <span class="s2">&quot;Yngwie&quot;</span>
</span><span class='line'>    <span class="n">last_name</span>  <span class="s2">&quot;Malmsteen&quot;</span>
</span><span class='line'>    <span class="n">association</span> <span class="ss">:hometown</span><span class="p">,</span> <span class="ss">factory</span><span class="p">:</span> <span class="ss">:city</span>
</span><span class='line'>    <span class="n">luggage</span>
</span><span class='line'>    <span class="n">bicycle</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">after</span><span class="p">(</span><span class="ss">:build</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">traveller</span><span class="o">|</span>
</span><span class='line'>      <span class="n">pump</span> <span class="o">=</span> <span class="no">FactoryGirl</span><span class="o">.</span><span class="n">build</span><span class="p">(</span><span class="ss">:bicycle_pump</span><span class="p">)</span>
</span><span class='line'>      <span class="n">traveller</span><span class="o">.</span><span class="n">bike_pump</span> <span class="o">=</span> <span class="n">pump</span>
</span><span class='line'>      <span class="n">traveller</span><span class="o">.</span><span class="n">inflate_tires</span>
</span><span class='line'>      <span class="n">traveller</span><span class="o">.</span><span class="n">pack_luggage</span>
</span><span class='line'>      <span class="n">traveller</span><span class="o">.</span><span class="n">buy_stamps</span>
</span><span class='line'>      <span class="c1"># etc.</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># spec/factories/homebodies.rb</span>
</span><span class='line'><span class="no">FactoryGirl</span><span class="o">.</span><span class="n">define</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">factory</span> <span class="ss">:homebody</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">first_name</span> <span class="s2">&quot;Joe&quot;</span>
</span><span class='line'>    <span class="n">last_name</span>  <span class="s2">&quot;Stumps&quot;</span>
</span><span class='line'>    <span class="n">spouse</span>
</span><span class='line'>    <span class="n">credit_score</span> <span class="mi">400</span>
</span><span class='line'>    <span class="n">house</span>
</span><span class='line'>    <span class="n">couch</span>
</span><span class='line'>    <span class="n">car</span>
</span><span class='line'>    <span class="n">dog</span>
</span><span class='line'>    <span class="c1"># etc.</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>We&rsquo;re also unintentionally hitting the database, as FactoryGirl saves both traveller and homebody in order to build the association. You can avoid this by specifying a build-strategy for the association:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">factory</span> <span class="ss">:couch_crash</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">association</span> <span class="ss">:traveller</span><span class="p">,</span> <span class="ss">strategy</span><span class="p">:</span> <span class="ss">:build</span>
</span><span class='line'>  <span class="n">association</span> <span class="ss">:homebody</span><span class="p">,</span>  <span class="ss">strategy</span><span class="p">:</span> <span class="ss">:build</span>
</span><span class='line'>  <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span></code></pre></td></tr></table></div></figure>


<p>You&rsquo;d also have to change the syntax in the associated factories:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">factory</span> <span class="ss">:traveller</span> <span class="k">do</span>
</span><span class='line'>  <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'>  <span class="n">association</span> <span class="ss">:luggage</span><span class="p">,</span> <span class="ss">strategy</span><span class="p">:</span> <span class="ss">:build</span>
</span><span class='line'>  <span class="n">association</span> <span class="ss">:bicycle</span><span class="p">,</span> <span class="ss">strategy</span><span class="p">:</span> <span class="ss">:build</span>
</span><span class='line'>  <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">factory</span> <span class="ss">:homebody</span> <span class="k">do</span>
</span><span class='line'>  <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'>  <span class="n">association</span> <span class="ss">:house</span><span class="p">,</span> <span class="ss">strategy</span><span class="p">:</span> <span class="ss">:build</span>
</span><span class='line'>  <span class="n">association</span> <span class="ss">:couch</span><span class="p">,</span> <span class="ss">strategy</span><span class="p">:</span> <span class="ss">:build</span>
</span><span class='line'>  <span class="n">association</span> <span class="ss">:car</span><span class="p">,</span>   <span class="ss">strategy</span><span class="p">:</span> <span class="ss">:build</span>
</span><span class='line'>  <span class="n">association</span> <span class="ss">:dog</span><span class="p">,</span>   <span class="ss">strategy</span><span class="p">:</span> <span class="ss">:build</span>
</span><span class='line'>  <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>It would be nice to avoid involving these large models any more than necessary, so let&rsquo;s rewrite the spec with a different technique. Instead of using factories to generate complex test objects, we&rsquo;ll use test doubles to stub out the context.</p>

<h3>Test-doubles</h3>

<p>Rspec&rsquo;s <code>double</code> method returns a test-double &mdash; a dummy object that stands in for a more complex object from your production code. The double can be told how to respond to various method calls:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">red_thing</span> <span class="o">=</span> <span class="n">double</span><span class="p">(</span><span class="s2">&quot;thing&quot;</span><span class="p">)</span>
</span><span class='line'><span class="c1"># The argument (ie. &quot;thing&quot;) is optional.</span>
</span><span class='line'><span class="c1"># It provides a name that test output can make use of.</span>
</span><span class='line'>
</span><span class='line'><span class="n">red_thing</span><span class="o">.</span><span class="n">stub</span><span class="p">(</span><span class="ss">:color</span><span class="p">)</span><span class="o">.</span><span class="n">and_return</span><span class="p">(</span><span class="s2">&quot;red&quot;</span><span class="p">)</span>
</span><span class='line'><span class="c1"># equivalent form:</span>
</span><span class='line'><span class="n">red_thing</span><span class="o">.</span><span class="n">stub</span><span class="p">(</span><span class="ss">:color</span><span class="p">)</span> <span class="p">{</span> <span class="s2">&quot;red&quot;</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Or, more concisely:</span>
</span><span class='line'><span class="n">red_house</span> <span class="o">=</span> <span class="n">double</span><span class="p">(</span><span class="s2">&quot;thing&quot;</span><span class="p">,</span> <span class="ss">color</span><span class="p">:</span> <span class="s2">&quot;red&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>The double only knows what it&rsquo;s been told explicitly, and will raise an error upon receiving any unexpected method call. If you&rsquo;re using Rspec 3, you can also use &ldquo;<a href="https://www.relishapp.com/rspec/rspec-mocks/v/3-1/docs/verifying-doubles">verifying doubles</a>&rdquo;, which know what class of object they&rsquo;re standing in for and will ensure that any methods being stubbed are actually present in the code.</p>

<h3>Rewrite</h3>

<p>While our spec should still read from the ground up, beginning with the context and arriving at an expectation, it can be helpful when <em>writing</em> to start with the expectation and work backwards. This is especially true when the context is complex. It also helps clarify what needs to be stubbed out, so let&rsquo;s give it a shot.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">expect</span><span class="p">(</span><span class="n">visit</span><span class="o">.</span><span class="n">status</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">eq</span><span class="p">(</span><span class="ss">:approaching</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>What is <code>visit</code>? Just a test double with the right attributes:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">visit</span> <span class="o">=</span> <span class="n">double</span><span class="p">(</span><span class="s2">&quot;visit&quot;</span><span class="p">,</span> <span class="n">arrival_date</span><span class="p">:</span> <span class="mi">1</span><span class="o">.</span><span class="n">week</span><span class="o">.</span><span class="n">from_now</span><span class="p">,</span> <span class="ss">postcards</span><span class="p">:</span> <span class="o">[</span><span class="n">postcard_100</span><span class="o">]</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>What about <code>postcard_100</code>? Just another test double.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">postcard_100</span> <span class="o">=</span> <span class="n">double</span><span class="p">(</span><span class="s2">&quot;postcard&quot;</span><span class="p">,</span> <span class="ss">distance</span><span class="p">:</span> <span class="mi">100</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Putting it all together, we have:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">context</span> <span class="s1">&#39;within 1 week of arrival date&#39;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">context</span> <span class="s1">&#39;with a postcard from 100 miles away&#39;</span> <span class="k">do</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">it</span> <span class="s1">&#39;is &quot;approaching&quot;&#39;</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">postcard_100</span> <span class="o">=</span> <span class="n">double</span><span class="p">(</span><span class="s2">&quot;postcard&quot;</span><span class="p">,</span> <span class="ss">distance</span><span class="p">:</span> <span class="mi">100</span><span class="p">)</span>
</span><span class='line'>      <span class="n">visit</span> <span class="o">=</span> <span class="n">double</span><span class="p">(</span><span class="s2">&quot;visit&quot;</span><span class="p">,</span> <span class="n">arrival_date</span><span class="p">:</span> <span class="mi">1</span><span class="o">.</span><span class="n">week</span><span class="o">.</span><span class="n">from_now</span><span class="p">,</span> <span class="ss">postcards</span><span class="p">:</span> <span class="o">[</span><span class="n">postcard_100</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">expect</span><span class="p">(</span><span class="n">visit</span><span class="o">.</span><span class="n">status</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">eq</span><span class="p">(</span><span class="ss">:approaching</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>I initially wanted faster specs to enable a better TDD flow. A nice side benefit of writing these stubbed tests is that it illuminates the dependencies and coupling in the production code you&rsquo;re working with and encourages better composition overall. FactoryGirl is still a wonderful tool, but it shouldn&rsquo;t be the only one in your belt.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[vim key-mappings]]></title>
    <link href="http://ivanbrennan.github.io/blog/2014/10/26/vim-key-mappings/"/>
    <updated>2014-10-26T12:04:00-04:00</updated>
    <id>http://ivanbrennan.github.io/blog/2014/10/26/vim-key-mappings</id>
    <content type="html"><![CDATA[<h3>:map</h3>

<p>In the land of Vim, most key sequences can easily be mapped to others. The basic syntax is <code>map a b</code>, which tells Vim that when you type <code>a</code>, it should act like <code>b</code>. Similarly, <code>map abc wxyz</code> would process <code>wxyz</code> when you typed <code>abc</code>, but let&rsquo;s look at a more useful example.</p>

<p>You can use <code>m</code> to set a mark at the current cursor position, then jump to it later using the backtick (<code>`</code>) key. Take this buffer for example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">penguify</span><span class="p">(</span><span class="n">being</span><span class="p">)</span>
</span><span class='line'>  <span class="no">Penguin</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">being</span><span class="o">.</span><span class="n">mass</span><span class="p">)</span>
</span><span class='line'><span class="k">rescue</span> <span class="no">NameError</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="s2">&quot;Can&#39;t penguify massless being.&quot;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>I&rsquo;ll put my cursor on the <em>N</em> in <code>NameError</code> and type (in normal mode) <code>mx</code>. This sets a mark we can jump to by typing <code>`x</code>. This is nice, but the backtick isn&rsquo;t the most comfortable key to reach for.</p>

<p>There&rsquo;s a similar command using the single-quote. Typing <code>'x</code> jumps to the first non-whitespace character on the marked line. Probably not as useful. Let&rsquo;s map the more reachable <code>'</code> to the more useful <code>`</code>.</p>

<p>On Vim&rsquo;s command-line, enter: <code>map ' `</code>. Now both <code>`</code> and <code>'</code> will take us directly to our mark. Instead of ditching the single-quote&rsquo;s original command entirely, let&rsquo;s map the backtick to it with <code>map ` '</code>. But this causes a problem. Hit either <code>`</code> or <code>'</code> and you&rsquo;ll get an error (<code>E223: recursive mapping</code>). We&rsquo;ve mapped <code>`</code> to <code>'</code>, which triggers <code>`</code>, which triggers <code>'</code>, and on and on.</p>

<h3>:noremap</h3>

<p>To recover, let&rsquo;s remove both mappings with <code>unmap `</code> and <code>unmap '</code>, to start fresh. Now instead of using <code>map</code> we&rsquo;ll use <code>noremap</code>. Running <code>noremap a b</code> will map <code>a</code> to <code>b</code> but avoid triggering anything <code>b</code> is mapped to. So we can enter <code>noremap ' `</code> and <code>noremap ` '</code> to swap our keys without falling into a recursive pit.</p>

<h3>map-modes</h3>

<p>Depending on how you define them, your key-mappings will only apply in certain modes. The mappings we created with <code>map</code> and <code>noremap</code> apply in Normal, Visual, Select, and Operator-pending modes. Note the absence of Insert mode in that list &mdash; we&rsquo;re not in danger of inserting <code>doesn`t</code> when we wanted <code>doesn't</code>.</p>

<p>The <code>map</code>, <code>noremap</code>, and <code>unmap</code> commands each have mode-specific variations. My .vimrc, for instance, has a mapping for line-completion in Insert mode:</p>

<pre><code>inoremap &lt;C-L&gt; &lt;C-X&gt;&lt;C-L&gt;
</code></pre>

<p>The <code>&lt;C-L&gt;</code> represents Control-L, and is case-insensitive (same as <code>&lt;c-l&gt;</code>). This makes line-completion less cumbersome without polluting modes other than Insert with the mapping. For more on map-modes, check out <code>:help :map-modes</code>. The map-overview (<code>:help map-overview</code>) is a good place to start.</p>

<h3>key-notation</h3>

<p>Vim uses a special notation for some keys. We saw <code>&lt;C-L&gt;</code> already. There&rsquo;s also <code>&lt;Left&gt;</code>, <code>&lt;S-Left&gt;</code> (shift-left), <code>&lt;Space&gt;</code>, <code>&lt;CR&gt;</code> (carriage return / enter), and many more (see <code>:help key-notation</code>). We can use these to expand our key-mapping vocabulary.</p>

<h3>editor-envy</h3>

<p>I noticed a feature in Sublime Text that I wanted to simulate in Vim: <code>⌘Enter</code> adds a newline to the <em>end</em> of the current line rather than inserting it at the cursor position. This is handy if you&rsquo;re in the middle of a line and want to open a new line beneath it without breaking the text the cursor&rsquo;s on.</p>

<p>To similate this, I needed to <code>inoremap</code> something to <code>&lt;C-O&gt;o</code>. From Insert mode, <code>&lt;C-O&gt;</code> pops you into Normal mode for a single command. Once there, <code>o</code> opens a new line beneath the current one and drops you onto it in Insert mode. In the interest of portability, I decided against using the <code>⌘</code> key, since it&rsquo;s Mac-specific, and went with Control instead:</p>

<pre><code>inoremap &lt;C-CR&gt; &lt;C-O&gt;o
</code></pre>

<p>Now I can hit Control-Enter from Insert mode to drop down to a new line without disrupting the one I&rsquo;m on. Actually no, I can&rsquo;t. I can if I&rsquo;m using MacVim, but terminal Vim doesn&rsquo;t recognize the <code>&lt;C-CR&gt;</code> key-combo. This is where things get interesting.</p>

<h3>terminal keycodes</h3>

<p>To get the <code>&lt;C-CR&gt;</code> key-mapping to work in terminal Vim, I needed to first tell iTerm what to send when I hit Control-Enter, then tell Vim what to listen for and how to interpret it. Let&rsquo;s start with iTerm. The steps for Terminal.app are similar, though the menus and appearance will differ.</p>

<p>In iTerm&rsquo;s <em>Preferences</em> (<code>⌘,</code>), the <em>Profiles</em> tab has a <em>Keys</em> subtab. From there, you can define custom actions to trigger with any number of key-combinations. Clicking the &lsquo;<strong>+</strong>&rsquo; at the bottom of the list reveals a dialog to add a new combination.</p>

<p><img class="screenshot" src="http://ivanbrennan.github.io/images/iterm/keys.png" title="keys" alt="iterm keys screenshot"></p>

<p>I hit Control-Enter to enter <code>^↩</code> in the <em>Keyboard Shortcut</em> field and selected <em>Send Escape Sequence</em> from the <em>Action</em> drop-down, revealing a field labeled &ldquo;Esc+&rdquo;. Here I entered <code>[25~</code>, telling iTerm to send Esc + <code>[25~</code> when Control-Enter is typed.</p>

<p>&ldquo;Why <code>[25~</code>? Where did that come from?&rdquo; I was hoping you wouldn&rsquo;t ask. Figuring out what codes to use, what wouldn&rsquo;t conflict with anything, and what would be interpretted consistently across xterm, GNU screen, and tmux was not a straightforward process. Lots of googling and trial and error, and recounting it is probably best saved for another post. For now, I&rsquo;ll stay focused on getting it wired up with Vim.</p>

<p>Next, I needed to tell Vim how to interpret the <code>^[[25~</code> escape sequence that iTerm would be sending its way. (Note that the initial <code>^[</code> is the Escape character itself.) I set an unused Function key to the escape sequence:</p>

<pre><code>set &lt;F13&gt;=^[[25~
</code></pre>

<p>To enter that command correctly, you need to type <code>set &lt;F13&gt;=</code>, hit Control-V, hit Escape, then finish with <code>[25~</code>. Control-V followed by Escape enters the actual terminal code for the Escape key (which <em>appears</em> as the single character <code>^[</code>). The same is true whether you&rsquo;re entering it on Vim&rsquo;s command-line or inserting it in your .vimrc.</p>

<p>With Vim listening for the escape sequence and associating it with a key, I mapped that key to <code>&lt;C-CR&gt;</code>:</p>

<pre><code>map  &lt;F13&gt; &lt;C-Cr&gt;  
map! &lt;F13&gt; &lt;C-Cr&gt;
</code></pre>

<p>The call to <code>map</code> applies the mapping in Normal, Visual, Select, and Operator-pending mappings, while <code>map!</code> applies to Insert and Command-line mappings. With all this in place, terminal Vim can recognize Control-Enter and the <code>&lt;C-CR&gt;</code> key-notation.</p>

<p>You can apply this approach to a lot of other key&rsquo;s that would otherwise be off-limits. A section of my <a href="https://github.com/ivanbrennan/vim/blob/master/vimrc">vimrc</a> wires up a bunch of them. I&rsquo;m cutting down on the mappings these days, but it&rsquo;s nice to know you can do this:</p>

<pre><code>if &amp;term =~ "xterm" || &amp;term =~ "screen" || &amp;term =~ "builtin_gui"
  " Ctrl-Enter
  set  &lt;F13&gt;=[25~
  map  &lt;F13&gt; &lt;C-CR&gt;
  map! &lt;F13&gt; &lt;C-CR&gt;

  " Shift-Enter
  set  &lt;F14&gt;=[27~
  map  &lt;F14&gt; &lt;S-CR&gt;
  map! &lt;F14&gt; &lt;S-CR&gt;

  " Ctrl-Space
  set  &lt;F15&gt;=[29~
  map  &lt;F15&gt; &lt;C-Space&gt;
  map! &lt;F15&gt; &lt;C-Space&gt;

  " Shift-Space
  set  &lt;F16&gt;=[30~
  map  &lt;F16&gt; &lt;S-Space&gt;
  map! &lt;F16&gt; &lt;S-Space&gt;

  " Ctrl-Backspace
  set  &lt;F17&gt;=[1;5P
  map  &lt;F17&gt; &lt;C-BS&gt;
  map! &lt;F17&gt; &lt;C-BS&gt;

  " Alt-Tab
  set  &lt;F18&gt;=[1;5Q
  map  &lt;F18&gt; &lt;M-Tab&gt;
  map! &lt;F18&gt; &lt;M-Tab&gt;

  " Alt-Shift-Tab
  set  &lt;F19&gt;=[1;5R
  map  &lt;F19&gt; &lt;M-S-Tab&gt;
  map! &lt;F19&gt; &lt;M-S-Tab&gt;

  " Ctrl-Up
  set  &lt;F20&gt;=[1;5A
  map  &lt;F20&gt; &lt;C-Up&gt;
  map! &lt;F20&gt; &lt;C-Up&gt;

  " Ctrl-Down
  set  &lt;F21&gt;=[1;5B
  map  &lt;F21&gt; &lt;C-Down&gt;
  map! &lt;F21&gt; &lt;C-Down&gt;

  " Ctrl-Right
  set  &lt;F22&gt;=[1;5C
  map  &lt;F22&gt; &lt;C-Right&gt;
  map! &lt;F22&gt; &lt;C-Right&gt;

  " Ctrl-Left
  set  &lt;F23&gt;=[1;5D
  map  &lt;F23&gt; &lt;C-Left&gt;
  map! &lt;F23&gt; &lt;C-Left&gt;

  " Ctrl-Tab
  set  &lt;F24&gt;=[31~
  map  &lt;F24&gt; &lt;C-Tab&gt;
  map! &lt;F24&gt; &lt;C-Tab&gt;

  " Ctrl-Shift-Tab
  set  &lt;F25&gt;=[32~
  map  &lt;F25&gt; &lt;C-S-Tab&gt;
  map! &lt;F25&gt; &lt;C-S-Tab&gt;

  " Ctrl-Comma
  set  &lt;F26&gt;=[33~
  map  &lt;F26&gt; &lt;C-,&gt;
  map! &lt;F26&gt; &lt;C-,&gt;

  " Ctrl-Shift-Space
  set  &lt;F27&gt;=[34~
  map  &lt;F27&gt; &lt;C-S-Space&gt;
  map! &lt;F27&gt; &lt;C-S-Space&gt;
endif
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rigging Vim's Netrw]]></title>
    <link href="http://ivanbrennan.github.io/blog/2014/01/16/rigging-vims-netrw/"/>
    <updated>2014-01-16T01:00:00-05:00</updated>
    <id>http://ivanbrennan.github.io/blog/2014/01/16/rigging-vims-netrw</id>
    <content type="html"><![CDATA[<p>If you&rsquo;re a Vim user, you&rsquo;re probably familiar with the <a href="http://www.vim.org/scripts/script.php?script_id=1075">NERDTree</a>, a plugin that provides a sidebar for navigating the filesystem, much like you get with a more graphical editor such as Sublime Text. It&rsquo;s a nice feature, but you don&rsquo;t necessarily need to install another plugin to get it. Most distributions of Vim come with <a href="http://www.vim.org/scripts/script.php?script_id=1075">Netrw</a> already built in. Built by <a href="http://www.drchip.org/astronaut/index.html">Charles CampBell</a>, Netrw is a plugin for browsing, reading, and writing files both locally and across networks.</p>

<p>Netrw is not NERDTree. It does much more, but the flip side is that NERDTree focuses on doing one thing well. That being said, at some point I got interested in reproducing what I liked about NERDTree using the built-in capabilities of Netrw. It took a bit of configuration and some dirty language (vimscript) but if you&rsquo;re not averse to any of that, read on.</p>

<p><img class="screenshot" src="http://ivanbrennan.github.io/images/vextoggle/4.png" title="vim" alt="vim screenshot"></p>

<p>My first goal was to toggle a sidebar navigator open/closed with a keystroke or two. The <code>:Vexplore</code> command opens a Netrw browser in a vertical split. If you pass the command a directory, it will open into that location, otherwise it opens in the current file&rsquo;s parent directory. There&rsquo;s a distinction between the current file&rsquo;s parent directory and the &ldquo;current working directory&rdquo; that Vim keeps track of. Say you start Vim from within ~/Development. You can <code>:edit</code> files anywhere you like (~/Development/resources, ~, /usr/local, etc.), and until you explicitly tell Vim to <code>:cd</code> to a new location, the current working directory will remain where it started, at ~/Development. You can use this as a home-base to work from in the current Vim session. With this in mind, I composed a small set of functions to toggle the sidebar in either the current file&rsquo;s directory (to access neighboring files), or the &ldquo;current working directory&rdquo; (which I tend to leave at the project root), and mapped them to a couple keystrokes I find convenient.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'><span class="k">fun</span><span class="p">!</span> VexToggle<span class="p">(</span><span class="nb">dir</span><span class="p">)</span>
</span><span class='line'>  <span class="k">if</span> exists<span class="p">(</span><span class="s2">&quot;t:vex_buf_nr&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">call</span> VexClose<span class="p">()</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>    <span class="k">call</span> VexOpen<span class="p">(</span><span class="k">a</span>:<span class="nb">dir</span><span class="p">)</span>
</span><span class='line'>  <span class="k">endif</span>
</span><span class='line'><span class="k">endf</span>
</span></code></pre></td></tr></table></div></figure>


<p>I&rsquo;m using <code>t:vex_buf_nr</code> to track whether the sidebar is currently open. The <code>t:</code> is scoping the variable to the current tab. That&rsquo;s so each tab can have its own sidebar. If you&rsquo;re not familiar with Vim&rsquo;s tabs, don&rsquo;t worry about it. It&rsquo;s a minor detail here. In the else clause, we pass <code>a:dir</code> (the <code>dir</code> argument that was passed into <code>VexToggle()</code>) to <code>VexOpen()</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'><span class="k">fun</span><span class="p">!</span> VexOpen<span class="p">(</span><span class="nb">dir</span><span class="p">)</span>
</span><span class='line'>  <span class="k">let</span> <span class="k">g</span>:netrw_browse_split<span class="p">=</span><span class="m">4</span>    <span class="c">&quot; open files in previous window</span>
</span><span class='line'>  <span class="k">let</span> vex_width <span class="p">=</span> <span class="m">25</span>
</span><span class='line'>
</span><span class='line'>  execute <span class="s2">&quot;Vexplore &quot;</span> . <span class="k">a</span>:<span class="nb">dir</span>
</span><span class='line'>  <span class="k">let</span> <span class="k">t</span>:vex_buf_nr <span class="p">=</span> bufnr<span class="p">(</span><span class="s2">&quot;%&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">wincmd</span> H
</span><span class='line'>
</span><span class='line'>  <span class="k">call</span> VexSize<span class="p">(</span>vex_width<span class="p">)</span>
</span><span class='line'><span class="k">endf</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>VexOpen()</code> starts by setting some options. &ldquo;Open files in previous window&rdquo; ensures that when we select a file to open, it opens in the window (split) we were in before entering the browser. We&rsquo;re also setting the desired window width for later use.</p>

<p>Next, we use vimscript&rsquo;s string concatenation operator (<code>.</code>) to compose the <code>Vexplore</code> call. It&rsquo;s a little ugly, but sometimes vimscript paints you into a corner like that. Now that we have an explorer open, let&rsquo;s remember it (the next line). The <code>"%"</code> expands to the current file name, and we store the associated buffer number for later reference.</p>

<p>If you have several splits open, calling <code>:Vexplore</code> will open a Netrw explorer in a vertical split next to <em>the current split</em>, so there&rsquo;s no guarantee it will sit on the far left of the screen or even occupy the full height of Vim. Calling <code>wincmd H</code> fixes that. Finally, calling <code>VexSize()</code> will set the sidebar&rsquo;s width.</p>

<p>I made a couple mappings to call <code>VexToggle()</code>. The first passes it Vim&rsquo;s &ldquo;current working directory&rdquo; as an argument, while the second passes an empty string. That way, I can use the first mapping to toggle an explorer sidebar from the project root and the second to toggle an explorer from whichever directory houses the file I&rsquo;m currently editing.</p>

<pre><code>noremap &lt;Leader&gt;&lt;Tab&gt; :call VexToggle(getcwd())&lt;CR&gt;
noremap &lt;Leader&gt;` :call VexToggle("")&lt;CR&gt;
</code></pre>

<p><img class="screenshot" src="http://ivanbrennan.github.io/images/vextoggle/8.png" title="vim" alt="vim screenshot"></p>

<p>When the sidebar is open, either mapping can be used to close it. <code>VexClose()</code> starts by noting which window it was called from, so it can return the cursor to that window after the sidebar has closed. The exception is when the cursor was <em>in</em> the sidebar when <code>VexClose()</code> was called, in which case the cursor will land in the previous window (whichever window holds the alternate file <code>"#"</code>). The middle section switches to the sidebar, closes it, and removes the internal variable that was tracking its presence. Finally, we switch to the appropriate destination window and call <code>NormalizeWidths()</code> to normalize the widths of all open windows. Note that we have to subtract 1 from the original window number that was stored, since closing the sidebar window decremented all the remaining window numbers.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'><span class="k">fun</span><span class="p">!</span> VexClose<span class="p">()</span>
</span><span class='line'>  <span class="k">let</span> cur_win_nr <span class="p">=</span> winnr<span class="p">()</span>
</span><span class='line'>  <span class="k">let</span> target_nr <span class="p">=</span> <span class="p">(</span> cur_win_nr <span class="p">==</span> <span class="m">1</span> ? winnr<span class="p">(</span><span class="s2">&quot;#&quot;</span><span class="p">)</span> : cur_win_nr <span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="m">1</span>wincmd <span class="k">w</span>
</span><span class='line'>  <span class="k">close</span>
</span><span class='line'>  unlet <span class="k">t</span>:vex_buf_nr
</span><span class='line'>
</span><span class='line'>  execute <span class="p">(</span>target_nr <span class="p">-</span> <span class="m">1</span><span class="p">)</span> . <span class="s2">&quot;wincmd w&quot;</span>
</span><span class='line'>  <span class="k">call</span> NormalizeWidths<span class="p">()</span>
</span><span class='line'><span class="k">endf</span>
</span></code></pre></td></tr></table></div></figure>


<p><img class="screenshot" src="http://ivanbrennan.github.io/images/vextoggle/10.png" title="vim" alt="vim screenshot"></p>

<p>All that&rsquo;s left are the final touches to window sizing, which occur in <code>VexSize()</code> and <code>NormalizeWidths()</code>. The first function sets and locks the sidebar width, then calls the second to normalize the widths off all other windows. <code>NormalizeWidths()</code> is a little hacky, but as far as I can tell it&rsquo;s the only native vimscript way to normalize window widths without affecting their heights. <code>'eadirection'</code> controls which dimensions are affected when <code>'equal always'</code> is set. We set it to <code>hor</code> (horizontal), toggle <code>'equal always'</code> off and back on (it&rsquo;s on by default), triggering the width normalization, and finally restore <code>'eadirection'</code> to it&rsquo;s original value.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'><span class="k">fun</span><span class="p">!</span> VexSize<span class="p">(</span>vex_width<span class="p">)</span>
</span><span class='line'>  execute <span class="s2">&quot;vertical resize&quot;</span> . <span class="k">a</span>:vex_width
</span><span class='line'>  <span class="k">set</span> <span class="nb">winfixwidth</span>
</span><span class='line'>  <span class="k">call</span> NormalizeWidths<span class="p">()</span>
</span><span class='line'><span class="k">endf</span>
</span><span class='line'>
</span><span class='line'><span class="k">fun</span><span class="p">!</span> NormalizeWidths<span class="p">()</span>
</span><span class='line'>  <span class="k">let</span> eadir_pref <span class="p">=</span> &amp;<span class="nb">eadirection</span>
</span><span class='line'>  <span class="k">set</span> <span class="nb">eadirection</span><span class="p">=</span>hor
</span><span class='line'>  <span class="k">set</span> <span class="nb">equalalways</span><span class="p">!</span> <span class="nb">equalalways</span><span class="p">!</span>
</span><span class='line'>  <span class="k">let</span> &amp;<span class="nb">eadirection</span> <span class="p">=</span> eadir_pref
</span><span class='line'><span class="k">endf</span>
</span></code></pre></td></tr></table></div></figure>


<p>Netrw lets you open a selected file in a vertical split with the <code>v</code> key, and I wanted to normalize window widths when such a split was added so things would remain evenly sized. The following autocommand makes it so.</p>

<pre><code>augroup NetrwGroup
  autocmd! BufEnter * call NormalizeWidths()
augroup END
</code></pre>

<p><img class="screenshot" src="http://ivanbrennan.github.io/images/vextoggle/12.png" title="vim" alt="vim screenshot"></p>

<p><strong><em>Closing Notes</em></strong></p>

<p>I ran into a couple minor bugs in Netrw during all of this, and turned to the <a href="https://groups.google.com/forum/#!topic/vim_use/XNOcLYsgk8Y">vim_use</a> mailing list for help. Netrw&rsquo;s author (Dr. Chip) was quick to respond with a fix and point me toward the <a href="http://www.drchip.org/astronaut/vim/index.html#NETRW">newest version</a>. Big thanks Dr. Chip!</p>

<p>I find myself mostly using Netrw&rsquo;s &ldquo;thin&rdquo; liststyle rather than the &ldquo;tree&rdquo; style I originally liked, but both work equally well in the sidebar. Finally, my <a href="https://github.com/ivanbrennan/vim/blob/master/vimrc">vimrc</a> is available for reference, though the relevant Netrw settings I&rsquo;m using are pasted below:</p>

<pre><code>let g:netrw_liststyle=0         " thin (change to 3 for tree)
let g:netrw_banner=0            " no banner
let g:netrw_altv=1              " open files on right
let g:netrw_preview=1           " open previews vertically
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Polymorphic Mythology]]></title>
    <link href="http://ivanbrennan.github.io/blog/2014/01/14/polymorphic-mythology/"/>
    <updated>2014-01-14T17:33:00-05:00</updated>
    <id>http://ivanbrennan.github.io/blog/2014/01/14/polymorphic-mythology</id>
    <content type="html"><![CDATA[<p>I was recently introduced to polymorphic associations in Active Record. They provide some extra flexibility in how you choose to wire up your models, and can be an elegant solution to some otherwise awkward problems. To demonstrate, I&rsquo;ll show how you could use them to catalog a collection of mythology.</p>

<p>We&rsquo;ll start with a tiny collection of tales: The Reign of the Hydra, The Golden Voyage, and The Life of King Adrastus. In addition to needing a myth model, we&rsquo;ll need models for beasts, voyages, and heros. Let&rsquo;s set things up so that a character/event/etc. can be the central figure in any number of myths, with each myth centered around a single such figure. Our beast model, then, could simply be,</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Beast</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'>  <span class="n">has_many</span> <span class="ss">:myths</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>backed by a straightforward migration,</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">CreateBeasts</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Migration</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">change</span>
</span><span class='line'>    <span class="n">create_table</span> <span class="ss">:beasts</span> <span class="k">do</span> <span class="o">|</span><span class="n">t</span><span class="o">|</span>
</span><span class='line'>      <span class="n">t</span><span class="o">.</span><span class="n">string</span> <span class="ss">:name</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>But wiring up the myth model isn&rsquo;t so simple. We could write three <code>belongs_to</code> statements into <code>myth.rb</code>, create three columns &mdash; beast_id, voyage_id, and hero_id &mdash; in the myths table, and find a way to enforce that two of the three always hold null values, but that&rsquo;s pretty cumbersome. Plus, as our catalog expands and we discover new types of central-figures (fools, floods, fires), we&rsquo;ll have to add more columns to accommodate any new classes we create. That&rsquo;s a lot of work to store a whole lot of nils.</p>

<p>Polymorphic associations allow you to handle this more elegantly. Let&rsquo;s describe the role that our central-figure plays in the context of a myth. For lack of a better term, I&rsquo;ll call it &ldquo;memorable&rdquo;. A dragon ravishing the countryside, an epic voyage, a tragic hero, these are all &ldquo;memorable&rdquo; things that could take center-stage in a myth. Using this common thread, we&rsquo;ll build a polymorphic association that can relate a myth to any such &ldquo;memorable&rdquo; object.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Myth</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'>  <span class="n">belongs_to</span> <span class="ss">:memorable</span><span class="p">,</span> <span class="ss">:polymorphic</span> <span class="o">=&gt;</span> <span class="kp">true</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>At the other end of the association, we&rsquo;ll tweak the <code>has_many</code> statements in each of our &ldquo;memorable&rdquo; models, declaring the role they can play in relation to a myth. The beast model, for example, becomes</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Beast</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'>  <span class="n">has_many</span> <span class="ss">:myths</span><span class="p">,</span> <span class="ss">:as</span> <span class="o">=&gt;</span> <span class="ss">:memorable</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now we can back the myth model with a much simpler table. The &ldquo;memorable&rdquo; central-figure&rsquo;s id and its type will be stored in a pair of columns, providing a myth with all it needs (a foreign key and the table that key applies to) to retrieve its central-figure.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">CreateMyths</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Migration</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">change</span>
</span><span class='line'>    <span class="n">create_table</span> <span class="ss">:myths</span> <span class="k">do</span> <span class="o">|</span><span class="n">t</span><span class="o">|</span>
</span><span class='line'>      <span class="n">t</span><span class="o">.</span><span class="n">string</span>  <span class="ss">:name</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">t</span><span class="o">.</span><span class="n">integer</span> <span class="ss">:memorable_id</span>
</span><span class='line'>      <span class="n">t</span><span class="o">.</span><span class="n">string</span>  <span class="ss">:memorable_type</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Active Record provides a shorthand for creating such a pair of columns: <code>t.references :memorable, :polymorphic =&gt; true</code>, which we could use in place of lines 6 and 7 above.</p>

<p>The polymorphic association allows us to create associations between existing objects,</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">adrastus</span> <span class="o">=</span> <span class="no">Hero</span><span class="o">.</span><span class="n">create</span><span class="p">(</span><span class="ss">:name</span> <span class="o">=&gt;</span> <span class="s2">&quot;Adrastus&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">life</span> <span class="o">=</span> <span class="no">Myth</span><span class="o">.</span><span class="n">create</span><span class="p">(</span><span class="ss">:name</span> <span class="o">=&gt;</span> <span class="s2">&quot;The Life of King Adrastus&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">life</span><span class="o">.</span><span class="n">memorable</span> <span class="o">=</span> <span class="n">adrastus</span>
</span><span class='line'>
</span><span class='line'><span class="n">afterlife</span> <span class="o">=</span> <span class="no">Myth</span><span class="o">.</span><span class="n">create</span><span class="p">(</span><span class="ss">:name</span> <span class="o">=&gt;</span> <span class="s2">&quot;The Afterlife of King Adrastus&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">adrastus</span><span class="o">.</span><span class="n">myths</span> <span class="o">&lt;&lt;</span> <span class="n">afterlife</span>
</span></code></pre></td></tr></table></div></figure>


<p>and to build associated myths off of a given &ldquo;memorable&rdquo; object,</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">adrastus</span><span class="o">.</span><span class="n">myths</span><span class="o">.</span><span class="n">build</span><span class="p">(</span><span class="ss">:name</span> <span class="o">=&gt;</span> <span class="s2">&quot;Adrastus - The Prequel&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">adrastus</span><span class="o">.</span><span class="n">save</span>
</span><span class='line'>
</span><span class='line'><span class="n">adrastus</span><span class="o">.</span><span class="n">myths</span><span class="o">.</span><span class="n">create</span><span class="p">(</span><span class="ss">:name</span> <span class="o">=&gt;</span> <span class="s2">&quot;Adrastus IV - The Return&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Note, however, that we can&rsquo;t build a &ldquo;memorable&rdquo; object off of a given myth, since the type of object (hero, voyage, etc.) is ambiguous.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Chef roles]]></title>
    <link href="http://ivanbrennan.github.io/blog/2013/11/21/chef-roles/"/>
    <updated>2013-11-21T09:11:00-05:00</updated>
    <id>http://ivanbrennan.github.io/blog/2013/11/21/chef-roles</id>
    <content type="html"><![CDATA[<p>It took me a while to wrap my head around a Chef role. It sounds simple enough at first &mdash; a collection of recipes that allows a node to act in a certain capacity, as say, a Redis server &mdash; but Chef also deals in cookbooks, which are also collections of recipes. So then what&rsquo;s the difference between a cookbook and a role?</p>

<p>A cookbook is a collection of recipes relating to a particular piece of technology. The nginx cookbook, for example, contains several recipes related to building and configuring nginx: <code>nginx::source</code> builds nginx from source, <code>nginx::ohai_plugin</code> provides the Ohai plugin as a template, <code>nginx::passenger</code> builds the passenger gem, etc.</p>

<p>A node is a single server, and Chef can apply a variety of recipes to the node to set it up as needed. Those recipes can be selected from a variety of cookbooks, and we don&rsquo;t have to use every recipe in a given cookbook. So how do we package the particular mix of recipes we need for a certain type of node? In a role.</p>

<p>For lack of a better analogy, you could think of a role as a multi-course meal made from several recipes pulled from a variety of cookbooks. A couple from a Pasta cookbook, one from a French Cuisine cookbook, one from a Pastries cookbook. The meal won&rsquo;t be made from every single recipe in those books, just the desired ones.</p>

<p>Recipes can include each other too, like mixins in Ruby (the <code>nginx::source</code> recipe, for example, includes the <code>nginx::ohai_plugin</code> recipe as part of it) but let&rsquo;s not add to the confusion just yet.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[sandboxing chef-solo]]></title>
    <link href="http://ivanbrennan.github.io/blog/2013/11/19/sandboxing-chef-solo/"/>
    <updated>2013-11-19T22:31:00-05:00</updated>
    <id>http://ivanbrennan.github.io/blog/2013/11/19/sandboxing-chef-solo</id>
    <content type="html"><![CDATA[<p>I&rsquo;m in the early stages of a team project. Our goal is to build a rails app that uses <a href="http://docs.opscode.com/chef_solo.html">chef-solo</a> to automate the creation and provisioning of a DigitalOcean droplet, and deploys to it using <a href="https://github.com/capistrano/capistrano">Capistrano</a>. The idea is to let a user deploy their own app to a <a href="http://digitalocean.com/">DO</a> server using our app to do the heavy lifting.</p>

<p>We&rsquo;re new to chef-solo, and initially I tried plowing through documentation, hoping to build a comprehensive understanding before diving into the project. But we really needed to get our hands dirty to get a feel for chef, so we started sandboxing tiny prototypes. We were flying blind at times, but the small successes kept us moving forward.</p>

<p>The zeroth step was to install some necessary tools, namely knife-solo and berkshelf. knife-solo is the command line tool for chef-solo, and berkshelf plays a role similar to Bundler, managing dependencies within chef.</p>

<p>For our first sandbox venture, we took an existing, chef-ready <a href="https://github.com/TalkingQuickly/rails-server-template">rails server template</a> and used it to provision an existing server.</p>

<p>Next we created a project directory from scratch, initialized a chef repo within it, and cloned an existing cookbook into the cookbooks directory. Easier said than done, but the ascii-art made it all worth while.</p>

<p><img class="production" src="http://i.imgur.com/gEGr6LJ.jpg" title="production" alt="production"></p>

<p>These little exercises were helpful, but we were still bogged down trying to map out the components and configurations encompassed by Chef. We backed up, got some helpful input from the TA&rsquo;s here at Flatiron School, and started mapping out the components necessary to <em>our</em> project, pinpointing the core functionality we needed to start with.</p>

<p><img class="sketch" src="http://i.imgur.com/oih6feU.jpg" title="sketch" alt="sketch"></p>

<h3>Step 1: Get a local chef repo communicating with DigitalOcean</h3>

<p>It turns out there&rsquo;s a plugin just for that: <a href="https://github.com/rmoriz/knife-digital_ocean">knife-digital_ocean</a>. We had to put our API-credentials from DigitalOcean into <code>knife.rb</code>, a configuration file for chef-solo, and add our SSH key to the DO account. Then we were able to create a new DO droplet with the desired OS and our SSH key, all in a single console command. Thank you knife-digital_ocean!</p>

<p>There&rsquo;s plenty more work ahead. Our rails app needs to:</p>

<ul>
<li>automate knife-digital_ocean commands</li>
<li>take user input

<ul>
<li>Github url for the app they want to deploy</li>
<li>necessary credentials (handle the SSH keys)</li>
</ul>
</li>
<li>run provisioning as a background process (it takes a while)</li>
<li>deploy with Capistrano</li>
</ul>


<p>It feels much more manageable with step 1 behind us and the skeleton of the project sketched out. Still, I&rsquo;m sure I&rsquo;ll be spending some more quality time in the Chef documentation.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Other People's Dotfiles (OPD)]]></title>
    <link href="http://ivanbrennan.github.io/blog/2013/11/01/other-peoples-dotfiles/"/>
    <updated>2013-11-01T02:21:00-04:00</updated>
    <id>http://ivanbrennan.github.io/blog/2013/11/01/other-peoples-dotfiles</id>
    <content type="html"><![CDATA[<p>After getting familiar with Git and the concept of version control, I got interested in backing up my dotfiles (<code>.bash_profile</code>, <code>.vimrc</code> and the like), most of which were in <code>~</code>. Now, turning my entire home directory into a Git repository would be asking for trouble, but a classmate suggested I might use symlinks to get around this.</p>

<p>The basic idea is this: move your dotfiles into their own directory, link to them from their original locations, ensuring they&rsquo;re still available to the applications that need them, and run <code>git init</code> with a little less trepidation.</p>

<p>I did some googling and found I&rsquo;m not the first to think of <a href="http://dotfiles.github.io">this</a>. There are some pretty advanced scripts out there for backing up your dotfiles this way, but I wanted to do it myself since I wasn&rsquo;t backing up that many files and I wanted to understand how it worked. The consensus seems to be to use symlinks, which begs the question: what&rsquo;s the difference between a symlink (or &ldquo;soft link&rdquo;), and a hard link?</p>

<p>What we think of as a filename is actually a pointer to a specific location in memory. If we have a file <code>~/goblet</code>, pointing at memory location-X, we could create a hard link to the same location with a different name, say <code>~/Stockpile/golden_cup</code>. Both <code>~/goblet</code> and <code>~/Stockpile/treasure/golden_cup</code> point directly at the same location in memory. We could instead create a symlink <code>~/Cloud/chalice</code> pointing at <code>~/goblet</code>, which in turn points to location-X in memory.</p>

<p>It&rsquo;s a subtle distinction, but one that carries real repercussions. If we move or delete the original <code>~/goblet</code>, then the hard link <code>~/Stockpile/golden_cup</code> will still point at the same data (moving another pointer has no effect on this pointer), but the symlink will be broken. It just pointed at the original path (<code>~/goblet</code>), and now it&rsquo;s connection to the memory location is severed.</p>

<p>Despite this apparent disadvantage to symlinks, the general consensus seems to be to prefer them for linking to dotfiles. They do offer the ability to link across separate filesystems, and besides, I&rsquo;m not planning on moving them around, so I went ahead and made some symlinks to serve my purpose.</p>

<p>Take, for example, my <code>~/.bash_profile</code>. I created a directory for my dotfiles at <code>~/Development/resources/dotfiles/</code>, moved the file to that directory, and linked to it with a symlink from its original location in <code>~</code>, allowing my shell to pick it up at the expected location (<code>~</code>).</p>

<pre><code>$ mkdir -p ~/Development/resources/dotfiles/
$ mv ~/.bash_profile ~/Development/resources/dotfiles/bash_profile
$ ln -s ~/Development/resources/dotfiles/bash_profile ~/.bash_profile
</code></pre>

<p>I removed the <code>.</code> from the target filename both for convenience (so it shows up in Finder), and to distinguish it from the symlink I created at <code>~/.bash_profile</code>. Then I initialized a git repository in the <code>dotfiles</code> directory, putting my precious dotfiles under version control and making it easier to share them.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[yield the weird]]></title>
    <link href="http://ivanbrennan.github.io/blog/2013/10/23/yield-the-weird/"/>
    <updated>2013-10-23T22:32:00-04:00</updated>
    <id>http://ivanbrennan.github.io/blog/2013/10/23/yield-the-weird</id>
    <content type="html"><![CDATA[<p>I&rsquo;m messing around with <code>yield</code> to get a handle on the various closures in Ruby, and I built a method that returns a rotated-mapped array. You could of course do this with the built-in <code>#rotate</code> and <code>#map</code> methods, but what fun is that?</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">rotomap</span><span class="p">(</span><span class="n">arr</span><span class="p">,</span> <span class="n">n</span><span class="p">)</span>
</span><span class='line'>  <span class="n">arr</span><span class="o">.</span><span class="n">each_index</span><span class="o">.</span><span class="n">inject</span><span class="p">(</span><span class="o">[]</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">roto</span><span class="p">,</span> <span class="n">i</span><span class="o">|</span>
</span><span class='line'>    <span class="n">roto</span> <span class="o">&lt;&lt;</span> <span class="k">yield</span><span class="p">(</span> <span class="n">arr</span><span class="o">[</span> <span class="p">(</span><span class="n">i</span><span class="o">+</span><span class="n">n</span><span class="p">)</span> <span class="o">%</span> <span class="p">(</span><span class="n">arr</span><span class="o">.</span><span class="n">count</span><span class="p">)</span> <span class="o">]</span> <span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">rotomap</span><span class="p">(</span><span class="o">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="o">]</span><span class="p">,</span> <span class="mi">3</span><span class="p">)</span> <span class="p">{</span> <span class="o">|</span><span class="n">x</span><span class="o">|</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">x</span> <span class="o">*</span> <span class="mi">5</span><span class="si">}</span><span class="s2"> merge requests&quot;</span> <span class="p">}</span>
</span><span class='line'><span class="c1"># =&gt; [&quot;20 merge requests&quot;, &quot;25 merge requests&quot;, &quot;5 merge requests&quot;, &quot;10 merge requests&quot;, &quot;15 merge requests&quot;]</span>
</span></code></pre></td></tr></table></div></figure>


<p>I don&rsquo;t imagine there&rsquo;s a lot of rotomapping going on out there, but it was fun to slap this together.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[modules, classes, pterosaurs]]></title>
    <link href="http://ivanbrennan.github.io/blog/2013/10/17/modules/"/>
    <updated>2013-10-17T12:50:00-04:00</updated>
    <id>http://ivanbrennan.github.io/blog/2013/10/17/modules</id>
    <content type="html"><![CDATA[<p><img class="illustration" src="http://upload.wikimedia.org/wikipedia/commons/3/38/Homology.jpg" title="wings" alt="Pterosaur, bat, and bird wings"></p>

<p>Pterosaurs, bats, and birds can/could all fly, but each evolved the ability independent of the others. This is an example of <a href="http://en.wikipedia.org/wiki/Convergent_evolution">convergent evolution</a>, the <em>&ldquo;independent evolution of similar features in species of different lineages&rdquo;</em>. The wings of bats, pterosaurs, and birds, the body-plans of marsupials and mammals, and the eyes of vertebrates and cephalopods are just some examples of this.</p>

<p>In Ruby, classes allow objects to be arranged into a hierarchical lineage, using inheritence to pass features from a parent class to all it&rsquo;s descendants. But we often want to share functionality across unrelated classes. Modules allow us to do just that. Let&rsquo;s consider the case of pterosaurs and bats.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">Flyable</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">fly</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;A </span><span class="si">#{</span><span class="nb">self</span><span class="o">.</span><span class="n">class</span><span class="si">}</span><span class="s2"> is flying.&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Bat</span>
</span><span class='line'>  <span class="kp">include</span> <span class="no">Flyable</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">echolocate</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;A </span><span class="si">#{</span><span class="nb">self</span><span class="o">.</span><span class="n">class</span><span class="si">}</span><span class="s2"> can see in the dark.&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Pterosaur</span>
</span><span class='line'>  <span class="kp">include</span> <span class="no">Flyable</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">bert</span> <span class="o">=</span> <span class="no">Bat</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'><span class="n">bert</span><span class="o">.</span><span class="n">fly</span>
</span><span class='line'><span class="c1"># =&gt; &quot;A Bat is flying.&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="n">phil</span> <span class="o">=</span> <span class="no">Pterosaur</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'><span class="n">phil</span><span class="o">.</span><span class="n">fly</span>
</span><span class='line'><span class="c1"># =&gt; &quot;A Pterosaur is flying.&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Contrast this with sharing functionality via classes. Let&rsquo;s create a couple species of bat by defining descendants of the Bat class:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">SeminoleBat</span> <span class="o">&lt;</span> <span class="no">Bat</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">migrate</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;A </span><span class="si">#{</span><span class="nb">self</span><span class="o">.</span><span class="n">class</span><span class="si">}</span><span class="s2"> is migrating.&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">CanyonBat</span> <span class="o">&lt;</span> <span class="no">Bat</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">hibernate</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;A </span><span class="si">#{</span><span class="nb">self</span><span class="o">.</span><span class="n">class</span><span class="si">}</span><span class="s2"> hibernating.&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">sam</span> <span class="o">=</span> <span class="no">SeminoleBat</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'><span class="n">sam</span><span class="o">.</span><span class="n">fly</span>
</span><span class='line'><span class="c1"># =&gt; &quot;A SeminoleBat is flying.&quot;</span>
</span><span class='line'><span class="n">sam</span><span class="o">.</span><span class="n">echolocate</span>
</span><span class='line'><span class="c1"># =&gt; &quot;A SeminoleBat can see in the dark.&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="n">candice</span> <span class="o">=</span> <span class="no">CanyonBat</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'><span class="n">candice</span><span class="o">.</span><span class="n">fly</span>
</span><span class='line'><span class="c1"># =&gt; &quot;A CanyonBat is flying.&quot;</span>
</span><span class='line'><span class="n">candice</span><span class="o">.</span><span class="n">echolocate</span>
</span><span class='line'><span class="c1"># =&gt; &quot;A CanyonBat can see in the dark.&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Both <code>sam</code> and <code>candice</code> can echolocate and fly, since the <code>SeminoleBat</code> and <code>CanyonBat</code> classes are descendants of the <code>Bat</code> class. The <code>SeminoleBat</code> and <code>CanyonBat</code> classes also each have unique functionality that distinguishes them, and is not shared between their two classes. Only instances of <code>SeminoleBat</code> can migrate, and only those of <code>CanyonBat</code> can hibernate.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">sam</span><span class="o">.</span><span class="n">migrate</span>
</span><span class='line'><span class="c1"># =&gt; &quot;A SeminoleBat is migrating.&quot;</span>
</span><span class='line'><span class="n">sam</span><span class="o">.</span><span class="n">hibernate</span>
</span><span class='line'><span class="c1"># =&gt; NoMethodError: undefined method `hibernate&#39; for #&lt;SeminoleBat:0x007f88fe006228&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="n">candice</span><span class="o">.</span><span class="n">hibernate</span>
</span><span class='line'><span class="c1"># =&gt; &quot;A CanyonBat is hibernating.&quot;</span>
</span><span class='line'><span class="n">candice</span><span class="o">.</span><span class="n">migrate</span>
</span><span class='line'><span class="c1"># =&gt; NoMethodError: undefined method `migrate&#39; for #&lt;CanyonBat:0x007f88fe807c38&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>And while <code>Pterosaur</code>, like <code>Bat</code> and all its descendants, can fly, it can&rsquo;t echolocate, migrate, or hibernate.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">phil</span><span class="o">.</span><span class="n">echolocate</span>
</span><span class='line'><span class="c1"># =&gt; NoMethodError: undefined method `echolocate&#39; for #&lt;Pterosaur:0x007fdcbc082eb0&gt;</span>
</span><span class='line'><span class="n">phil</span><span class="o">.</span><span class="n">migrate</span>
</span><span class='line'><span class="c1"># =&gt; NoMethodError: undefined method `migrate&#39; for #&lt;Pterosaur:0x007fdcbc082eb0&gt;</span>
</span><span class='line'><span class="n">phil</span><span class="o">.</span><span class="n">hibernate</span>
</span><span class='line'><span class="c1"># =&gt; NoMethodError: undefined method `hibernate&#39; for #&lt;Pterosaur:0x007fdcbc082eb0&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>There is a bit more to Modules (they can be used to define class methods as well as instance methods, and they can include constants), but the general purpose they serve is to enable sharing functionality across unrelated classes.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[enumerables]]></title>
    <link href="http://ivanbrennan.github.io/blog/2013/10/08/enumerables/"/>
    <updated>2013-10-08T08:38:00-04:00</updated>
    <id>http://ivanbrennan.github.io/blog/2013/10/08/enumerables</id>
    <content type="html"><![CDATA[<p>Ruby provides lots of built-in methods for working with arrays, but at first glance, some seem to be missing from the <a href="http://ruby-doc.org/core-2.0.0/Array.html">Array documentation</a>. A good example is the <code>#find</code> method, which returns the first element satisfying the criteria you provide in a block.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="o">].</span><span class="n">find</span> <span class="p">{</span> <span class="o">|</span><span class="n">x</span><span class="o">|</span> <span class="n">x</span> <span class="o">&gt;</span> <span class="mi">2</span> <span class="p">}</span>  <span class="c1"># =&gt; 3</span>
</span></code></pre></td></tr></table></div></figure>


<p>The fact is, these methods are mixed in from the <a href="http://ruby-doc.org/core-2.0.0/Enumerable.html">Enumerable module</a>, a collection of useful methods that can be applied to Arrays, Ranges, and Sets, among other Ruby classes. A simple check <code>whatever_object.is_a? Enumerable</code> will confirm whether whatever object your dealing with includes the Enumerable module.</p>

<p>One of these methods, <code>#zip</code>, has been calling out to me since I started learning Ruby. It seemed like an alchemical process that merged arrays in a mysterious way. In practice, it simply merges the corresponding elements of each array, returning an array of arrays.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">i_got</span>   <span class="o">=</span> <span class="o">[</span><span class="s2">&quot;I got the style&quot;</span><span class="p">,</span>
</span><span class='line'>           <span class="s2">&quot;I got the clothes&quot;</span><span class="p">,</span>
</span><span class='line'>           <span class="s2">&quot;I got the bread&quot;</span><span class="p">,</span>
</span><span class='line'>           <span class="s2">&quot;I got the winda&quot;</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'><span class="n">but_not</span> <span class="o">=</span> <span class="o">[</span><span class="s2">&quot;but not the grace&quot;</span><span class="p">,</span>
</span><span class='line'>           <span class="s2">&quot;but not the face&quot;</span><span class="p">,</span>
</span><span class='line'>           <span class="s2">&quot;but not the butter&quot;</span><span class="p">,</span>
</span><span class='line'>           <span class="s2">&quot;but not the shutter&quot;</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'><span class="n">i_got</span><span class="o">.</span><span class="n">zip</span><span class="p">(</span><span class="n">but_not</span><span class="p">)</span>
</span><span class='line'><span class="c1"># =&gt; [[&quot;I got the style&quot;, &quot;but not the grace&quot;],</span>
</span><span class='line'><span class="c1">#     [&quot;I got the clothes&quot;, &quot;but not the face&quot;],</span>
</span><span class='line'><span class="c1">#     [&quot;I got the bread&quot;, &quot;but not the butter&quot;],</span>
</span><span class='line'><span class="c1">#     [&quot;I got the winda&quot;, &quot;but not the shutter&quot;]]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Pretty nice, but why don&rsquo;t we do <a href="http://www.youtube.com/watch?v=ByomIJf5n9w">Tom Waits</a> proud and join those phrases?</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">i_got</span><span class="o">.</span><span class="n">zip</span><span class="p">(</span><span class="n">but_not</span><span class="p">)</span> <span class="p">{</span><span class="o">|</span><span class="n">got_not</span><span class="o">|</span> <span class="n">got_not</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="s2">&quot;, &quot;</span><span class="p">)}</span>
</span><span class='line'><span class="c1"># =&gt; nil</span>
</span></code></pre></td></tr></table></div></figure>


<p>Whoops! Passing <code>#zip</code> a block will invoke the block for each output array, but return <code>nil</code> at the end of the day. A call to <code>#map</code> to will do the trick.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">i_got</span><span class="o">.</span><span class="n">zip</span><span class="p">(</span><span class="n">but_not</span><span class="p">)</span><span class="o">.</span><span class="n">map</span> <span class="p">{</span><span class="o">|</span><span class="n">got_not</span><span class="o">|</span> <span class="n">got_not</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="s2">&quot;, &quot;</span><span class="p">)}</span>
</span><span class='line'><span class="c1"># =&gt; [&quot;I got the style, but not the grace&quot;,</span>
</span><span class='line'><span class="c1">#     &quot;I got the clothes, but not the face&quot;,</span>
</span><span class='line'><span class="c1">#     &quot;I got the bread, but not the butter&quot;,</span>
</span><span class='line'><span class="c1">#     &quot;I got the winda, but not the shutter&quot;]</span>
</span></code></pre></td></tr></table></div></figure>


<p>In fact, <code>#zip</code> can merge any number of arrays&hellip;</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">bagels</span>  <span class="o">=</span> <span class="o">[</span><span class="s2">&quot;sesame bagel&quot;</span><span class="p">,</span>
</span><span class='line'>           <span class="s2">&quot;plain bagel&quot;</span><span class="p">,</span>
</span><span class='line'>           <span class="s2">&quot;poppy bagel&quot;</span><span class="p">,</span>
</span><span class='line'>           <span class="s2">&quot;pumpernickel bagel&quot;</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'><span class="n">spreads</span> <span class="o">=</span> <span class="o">[</span><span class="s2">&quot;cream cheese&quot;</span><span class="p">,</span>
</span><span class='line'>           <span class="s2">&quot;butter&quot;</span><span class="p">,</span>
</span><span class='line'>           <span class="s2">&quot;peanut-butter&quot;</span><span class="p">,</span>
</span><span class='line'>           <span class="s2">&quot;jam&quot;</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'><span class="n">extras</span>  <span class="o">=</span> <span class="o">[</span><span class="s2">&quot;lox&quot;</span><span class="p">,</span>
</span><span class='line'>           <span class="s2">&quot;tomato&quot;</span><span class="p">,</span>
</span><span class='line'>           <span class="s2">&quot;chives&quot;</span><span class="p">,</span>
</span><span class='line'>           <span class="s2">&quot;lettuce&quot;</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'><span class="n">bagels</span><span class="o">.</span><span class="n">zip</span><span class="p">(</span><span class="n">spreads</span><span class="p">,</span> <span class="n">extras</span><span class="p">)</span><span class="o">.</span><span class="n">map</span> <span class="k">do</span> <span class="o">|</span><span class="n">bgl</span><span class="p">,</span> <span class="n">spd</span><span class="p">,</span> <span class="n">xtr</span><span class="o">|</span>
</span><span class='line'>  <span class="s2">&quot;</span><span class="si">#{</span><span class="n">bgl</span><span class="si">}</span><span class="s2"> with </span><span class="si">#{</span><span class="n">spd</span><span class="si">}</span><span class="s2"> and </span><span class="si">#{</span><span class="n">xtr</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="c1"># =&gt; [&quot;sesame bagel with cream cheese and lox&quot;,</span>
</span><span class='line'><span class="c1">#     &quot;plain bagel with butter and tomato&quot;,</span>
</span><span class='line'><span class="c1">#     &quot;poppy bagel with peanut-butter and chives&quot;,</span>
</span><span class='line'><span class="c1">#     &quot;pumpernickel bagel with jam and lettuce&quot;]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Not all the tastiest combinations, but that&rsquo;s how <code>#zip</code> works, it just matches up the elements in whatever order they appeared in the original arrays.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[hello world]]></title>
    <link href="http://ivanbrennan.github.io/blog/2013/09/24/hello-world/"/>
    <updated>2013-09-24T20:18:00-04:00</updated>
    <id>http://ivanbrennan.github.io/blog/2013/09/24/hello-world</id>
    <content type="html"><![CDATA[<p>Hello world. Exactly.</p>
]]></content>
  </entry>
  
</feed>
